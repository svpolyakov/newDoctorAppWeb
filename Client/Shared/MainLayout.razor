@inherits LayoutComponentBase
@using DoctorAppWeb.Shared.Models
@using DoctorAppWeb.Client.Services
@using DoctorAppWeb.Shared.Models
@using IndexedDB.Blazor;
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IIndexedDbFactory DbFactory

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row">
            <button type="button" class="btn btn-link ml-md-auto" @onclick="@LogoutClick">Logout</button>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>
@functions{

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    //[Parameter]
    //public static string UserName { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            ConnectionStatus result = null;
            result = await Http.GetFromJsonAsync<ConnectionStatus>("Tools");

            if (result == null)
            {
                throw new Exception();
            }
        }
        catch (Exception ex)
        {
            CustomAuthorization customAuthorization = null;
            using (var db = await this.DbFactory.Create<MainDB>())
            {
                DateTime? maxDate = db.CustomAuthorizations.Max(x => x.DateUpdate);
                customAuthorization = db.CustomAuthorizations.FirstOrDefault(x => x.DateUpdate == maxDate);
                if(customAuthorization != null)
                {
                    if(maxDate == null || (customAuthorization.DateUpdate.HasValue && maxDate?.AddDays(1) < DateTime.Now))
                    {
                        customAuthorization.ActualAuthorization = false;
                        await db.SaveChanges();
                    }
                }
            }

            if (customAuthorization == null || (customAuthorization.ActualAuthorization.HasValue && !customAuthorization.ActualAuthorization.Value))
            {
                navigationManager.NavigateTo("/authrequired");
            }
            //else
            //{
            //    navigationManager.NavigateTo("");
            //}
            return;
        }

        if (!(await AuthenticationState).User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            using (var db = await this.DbFactory.Create<MainDB>())
            {
                string userName = (await AuthenticationState).User.Identity.Name;
                foreach(CustomAuthorization customAuth in db.CustomAuthorizations.Where(x => x.Login == userName))
                {
                    db.CustomAuthorizations.Remove(customAuth);
                }
                await db.SaveChanges();

                db.CustomAuthorizations.Add(new CustomAuthorization
                {
                    Login = userName,
                    Password = "Hash",
                    ActualAuthorization = false,
                    DateUpdate = DateTime.Now
                });
                await db.SaveChanges();
            }
        }
    }
    async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }
}
