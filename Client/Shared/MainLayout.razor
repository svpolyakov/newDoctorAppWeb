@inherits LayoutComponentBase
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IIndexedDbFactory DbFactory
<div class="page">
    @*<div class="sidebar">
        <NavMenu />
    </div>*@

    <div class="main">
        <div class="top-row">
            <button type="button" class="btn btn-link ml-md-auto" @onclick="@LogoutClick">Выход</button>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>


@functions{

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    public static bool HasDbUserInfo = false;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            ConnectionStatus result = null;
            result = await Http.GetFromJsonAsync<ConnectionStatus>("Tools");

            if (result == null)
            {
                throw new Exception();
            }
        }
        catch (Exception) //Если офлайн
        {
            CustomAuthorization customAuthorization = null;
            DateTime? maxDate = null;
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                maxDate = db.CustomAuthorizations.Max(x => x.DateActual);
                customAuthorization = db.CustomAuthorizations.FirstOrDefault(x => x.DateActual.HasValue && x.DateActual == maxDate);
                if (customAuthorization == null || (customAuthorization != null && maxDate.Value.AddDays(1) < DateTime.Now))
                {
                    navigationManager.NavigateTo("/authrequired");
                }
                else
                {
                    customAuthorization.DateActual = DateTime.Now;
                    await db.SaveChanges();
                }
            }
            return;
        }

        if (!(await AuthenticationState).User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            string userName = (await AuthenticationState).User.Identity.Name;
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                CustomAuthorization authorization = db.CustomAuthorizations.FirstOrDefault(x => x.Login == userName);
                if (authorization == null && !HasDbUserInfo)
                {
                    UserInfoDto userInfo = await Http.GetFromJsonAsync<UserInfoDto>("Tools/" + userName);
                    db.CustomAuthorizations.Add(new CustomAuthorization
                    {
                        Login = userName,
                        Password = "Hash",
                        DateActual = DateTime.Now,
                        DateUpdate = null,
                        FirstName = userInfo.FirstName,
                        LastName = userInfo.LastName,
                        MiddleName = userInfo.MiddleName,
                        Availability_265 = userInfo.Permissions.Contains("285"),
                        Availability_283 = userInfo.Permissions.Contains("283"),
                        Availability_5 = userInfo.Permissions.Contains("5"),
                        Availability_751 = userInfo.Permissions.Contains("751"),
                        Snils = userInfo.Snils,
                        UserId = userInfo.UserIdAV
                    });
                    HasDbUserInfo = true;
                }
                else if(HasDbUserInfo && authorization != null)
                {
                    authorization.DateActual = DateTime.Now;
                }
                await db.SaveChanges();
            }
        }
    }
    async Task LogoutClick()
    {
        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            foreach(CustomAuthorization customAuthorization in db.CustomAuthorizations)
            {
                db.CustomAuthorizations.Remove(customAuthorization);
            }
            await db.SaveChanges();
            HasDbUserInfo = false;
        }
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }
}
