@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject StateContainer StateContainer
@inject IPatientsService PatientService
@using Newtonsoft.Json

<MudThemeProvider Theme="theme" />
<CascadingBlazoredModal>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <CascadingAuthenticationState>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </CascadingAuthenticationState>
        </NotFound>
    </Router>
</CascadingBlazoredModal>

@code {
    MudTheme theme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = DoctorAppWeb.Client.Shared.Colors.Blue,
            Secondary = DoctorAppWeb.Client.Shared.Colors.Green,
            Tertiary = "#ffffff",
        },

        Typography = new Typography()
        {

            H3 = new H3()
            {
                FontFamily = new[] { "Poppins", "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "3rem",
                FontWeight = 300,
                LineHeight = 1.16,
                LetterSpacing = "-1.5px"
            },

            H4 = new H4()
            {
                FontFamily = new[] { "Poppins", "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "2.125rem",
                FontWeight = 300,
                LineHeight = 1.2,
                LetterSpacing = "-0.5px"
            },

            H5 = new H5()
            {
                FontFamily = new[] { "Poppins", "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "1.5rem",
                FontWeight = 400,
                LineHeight = 1.16,
                LetterSpacing = "-1.5px"
            },

            Body1 = new Body1()
            {
                FontFamily = new[] { "Poppins", "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "1rem",
                FontWeight = 400,
                LineHeight = 1.23,
                LetterSpacing = "0.25px"
            },

            Caption = new Caption()
            {
                FontFamily = new[] { "Poppins", "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "0.75rem",
                FontWeight = 400,
                LineHeight = 1.33,
                LetterSpacing = "0.25px"
            }
        }

    };

    protected override async Task OnInitializedAsync()
    {
        //await localStorage.SetItemAsync("name", StateContainer.AppTitle);
        string idS = await localStorage.GetItemAsync<string>("CurrentPatientID");
        string hcsIdS = await localStorage.GetItemAsync<string>("HealthcareServiceId");

        string appTitle = await localStorage.GetItemAsync<string>("AppTitle");
        string currentPage = await localStorage.GetItemAsync<string>("CurrentPage");

        string currentPatient = await localStorage.GetItemAsync<string>("CurrentPatient");

        if (string.IsNullOrEmpty(idS) || string.IsNullOrEmpty(hcsIdS) || string.IsNullOrEmpty(appTitle) ||
            string.IsNullOrEmpty(currentPage) || string.IsNullOrEmpty(currentPatient))
        {
            return;
        }

        Guid id = new Guid(idS);
        Guid hcsId = new Guid(hcsIdS);

        PatientService.CurrentPatient = id;
        PatientService.HealthcareServiceId = hcsId;

        StateContainer.AppTitle = appTitle;
        StateContainer.CurrentPage = currentPage;

        StateContainer.CurrentPatient = JsonConvert.DeserializeObject<Patient>(currentPatient);

    }
}