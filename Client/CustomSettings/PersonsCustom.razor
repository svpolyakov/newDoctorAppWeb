@page "/personsCustom"
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPatientsService PatientService
@inject StateContainer StateContainer

<Progress isVisible="@showProgress"></Progress>

<div class="pageWrapper">

    <MudCard Class="card">
        <MudText Color="@Color.Primary" Typo="Typo.h6">Вкладка по умолчанию:</MudText>
        <MudRadioGroup @bind-SelectedOption="@CurrentFilter" T="string">
            <MudRadio Color="Color.Primary" Option="@("1")" TValue="string">Мои пациенты</MudRadio>
            <MudRadio Color="Color.Primary" Option="@("4")" TValue="string">Поступившие</MudRadio>
            <MudRadio Color="Color.Primary" Option="@("2")" TValue="string">В приемном</MudRadio>
            <MudRadio Color="Color.Primary" Option="@("7")" TValue="string">Все пациенты</MudRadio>
        </MudRadioGroup>

        <MudText Color="@Color.Primary" Typo="Typo.h6">Настройки отображения:</MudText>
        <!-- those blocks should be put in separate components, but it takes time -->
        <MudCard>
            <MudGrid>
                <MudItem xs="4">
                    <MudText Color="@Color.Secondary" Typo="Typo.body1">Список колонок</MudText>
                    <div ondragstart="event.dataTransfer.setData('', event.target.id);"
                         dropzone="move"
                         ondragover="event.preventDefault();"
                         @ondragenter="() => HandleDragEnter(1)"
                         @ondragleave="() => HandleDragLeave(1)"
                         @ondrop="()=> HandleDrop(null, 1)"
                         class="itemsContainer @dropClassT1">
                        @foreach (var item in CustomizationItems.Where(item => item.type == 1).Select((value, i) => new { i, value }))
                        {
                            var value = item.value;
                            var index = item.i;
                            <DraggableItem OnDrop="@(()=> HandleDrop(value, 1))"
                                           OnDragStart="@((DragEventArgs args) => OnDragStart(args, value))"
                                           OnOver="@(() => HandleOver(value))"
                                           top="@IndexToOffsetStr(index)"
                                           title="@value.Text" />

                        }
                    </div>
                </MudItem>
                <MudItem xs="4">
                    <MudText Color="@Color.Secondary" Typo="Typo.body1">Все данные</MudText>
                    <div ondragstart="event.dataTransfer.setData('', event.target.id);"
                         dropzone="move"
                         ondragover="event.preventDefault();"
                         @ondragenter="() => HandleDragEnter(2)"
                         @ondragleave="() => HandleDragLeave(2)"
                         @ondrop="()=> HandleDrop(null, 2)"
                         class="itemsContainer @dropClassT2">
                        @foreach (var item in CustomizationItems.Where(item => item.type == 2).Select((value, i) => new { i, value }))
                        {
                            var value = item.value;
                            var index = item.i;
                            <DraggableItem OnDrop="@(()=> HandleDrop(value, 2))"
                                           OnDragStart="@((DragEventArgs args) => OnDragStart(args, value))"
                                           OnOver="@(() => HandleOver(value))"
                                           top="@IndexToOffsetStr(index)"
                                           title="@value.Text" />

                        }
                    </div>
                </MudItem>
                <MudItem xs="4">
                    <MudText Color="@Color.Secondary" Typo="Typo.body1">Данные пациента</MudText>
                    <div ondragstart="event.dataTransfer.setData('', event.target.id);"
                         dropzone="move"
                         ondragover="event.preventDefault();"
                         @ondragenter="() => HandleDragEnter(3)"
                         @ondragleave="() => HandleDragLeave(3)"
                         @ondrop="()=> HandleDrop(null, 3)"
                         class="itemsContainer @dropClassT3">
                        @foreach (var item in CustomizationItems.Where(item => item.type == 3).Select((value, i) => new { i, value }))
                        {
                            var value = item.value;
                            var index = item.i;
                            <DraggableItem OnDrop="@(()=> HandleDrop(value, 3))"
                                           OnDragStart="@((DragEventArgs args) => OnDragStart(args, value))"
                                           OnOver="@(() => HandleOver(value))"
                                           top="@IndexToOffsetStr(index)"
                                           title="@value.Text" />
                        }
                    </div>
                </MudItem>
            </MudGrid>
        </MudCard>
    </MudCard>
</div>


<style>
    .itemsContainer {
        border: 1px dashed @DoctorAppWeb.Client.Shared.Colors.BorderGray;
        padding-left: 1rem;
        padding-right: 1rem;
        padding-top: 0.25rem;
        position: relative;

        min-height: 500px;
    }

    .can-drop {
        background-color: @DoctorAppWeb.Client.Shared.Colors.LightestBlue;
    }

    .card {
        padding: 1rem;
    }
</style>


@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    public bool showProgress = true;

    protected string CurrentFilter { get; set; }
    protected override async Task OnInitializedAsync()
    {
        showProgress = true;
        StateContainer.AppTitle = "Настройка списка пациентов";
        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            string filterName = null;// db.CustomPersons.FirstOrDefault()?.CustomGroupPersons.FirstOrDefault(x => x.Selected)?.NameButtonEn;
            switch (filterName)
            {
                case "MyPatient": CurrentFilter = "1"; break;
                case "InEmergencyRoom": CurrentFilter = "2"; break;
                case "ToMyDepartments": CurrentFilter = "4"; break;
                case "AllPatients": CurrentFilter = "7"; break;
                default: CurrentFilter = "1"; break;
            }
            showProgress = false;

            // todo: here we need to fill CustomizationItems.
            // type 1 is for left panel; 2 - middle; 3 - right
        }
    }

    int currentIndex;
    int currentOverIndex = -1;

    List<CustomizationItem> CustomizationItems = new List<CustomizationItem> {
        new CustomizationItem() { ID= "i1", Text= "Фамилия", type=2},
        new CustomizationItem() { ID= "i2", Text= "Имя", type=2},
        new CustomizationItem() { ID= "i3", Text= "Отчество", type=2},
        new CustomizationItem() { ID= "i4", Text= "Воруй", type=2},
        new CustomizationItem() { ID= "i5", Text= "Убивай", type=2},
    };

    string dropClassT1 = "";
    string dropClassT2 = "";
    string dropClassT3 = "";

    private double startX, startY, offsetX, offsetY;

    String[] Items = new String[] { "1", "2", "3", "4" };

    private const int itemHeight = 80;
    private const int topOffset = 16;
    private double draggedOverIndex = -1;

    int GetIndex(CustomizationItem item)
    {
        return CustomizationItems.FindIndex(a => a.ID == item.ID);
    }

    private void OnDragStart(DragEventArgs args, CustomizationItem item)
    {
        currentIndex = GetIndex(item);
        startX = args.ClientX;
        startY = args.ClientY - IndexToOffset(GetIndex(item));
    }

    private void HandleDragEnter(int type)
    {
        if (type == 1)
        {
            dropClassT1 = "can-drop";
        }
        else if (type == 2)
        {
            dropClassT2 = "can-drop";
        }
        else if (type == 3)
        {
            dropClassT3 = "can-drop";
        }
    }

    private void HandleDragLeave(int type)
    {
        if (type == 1)
        {
            dropClassT1 = "";
        }
        else if (type == 2)
        {
            dropClassT2 = "";
        }
        else if (type == 3)
        {
            dropClassT3 = "";
        }
    }

    private void HandleDrop(CustomizationItem item, int type)
    {
        int index;
        if (item != null)
        {
            index = GetIndex(item);
        }
        else
        {
            index = currentOverIndex;
        }

        HandleDragLeave(type);

        var current = CustomizationItems[currentIndex];
        current.type = type;

        if (index == -1)
        {
            return;
        }

        CustomizationItems.RemoveAt(currentIndex);
        CustomizationItems.Insert(index, current);

        currentIndex = index;
        currentOverIndex = -1;

        // todo: hre we need to save customization to the database
    }

    private void HandleOver(CustomizationItem item)
    {

        var current = CustomizationItems[currentIndex];
        if (current != item)
        {
            currentOverIndex = GetIndex(item);
        }

    }

    public string IndexToOffsetStr(int index)
    {
        return IndexToOffset(index) + "px";
    }

    public int IndexToOffset(int index)
    {
        if (index > currentOverIndex && currentOverIndex >= 0)
        {
            return (index + 1) * itemHeight + topOffset;
        }
        else
        {
            return index * itemHeight + topOffset;
        }
    }

    public double OffsetToIndex(double offset)
    {
        double position = offset / itemHeight;
        return Math.Floor(position);
    }
}