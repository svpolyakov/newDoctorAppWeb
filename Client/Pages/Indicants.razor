@page "/indications"
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPatientsService PatientService
@inject NavigationManager navigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject StateContainer StateContainer

<Progress isVisible="@showProgress"></Progress>
<MudPaper Class="innerPageWrapper">
    <div class="pageWrapper">
        <MudText Typo="Typo.h5">
            Показатели
        </MudText>

        <div class="tabWrapper">
            <MudTabs>
                <MudTabPanel Text="ГРАФИКИ">
                    @if (indCharts != null && indCharts.Any())
                    {
                        @foreach (IndicantChartDto indChart in indCharts)
                        {
                            <MudGrid>
                                <MudItem Style="margin-bottom: 10px" xs="12">
                                    <MudText Typo="Typo.h5">
                                        @indChart.Caption
                                    </MudText>
                                    <LineChart Id="@indChart.Caption"
                                               Data="@LineChartSeries(indChart).ToArray()"
                                               Labels="@ChartLabels(indChart).ToArray()"></LineChart>
                                </MudItem>
                            </MudGrid>
                        }
                    }
                    else
                    {
                        <MudText Class="emptyState" Typo="Typo.h5">@DoctorAppWeb.Client.Shared.EmptyStateMessages.Indications</MudText>
                    }
                </MudTabPanel>
                <MudTabPanel Text="ТАБЛИЦА">
                    @if (indicants != null && indicants.Any())
                    {
                        <MudTable Items="@indicants" Hover="false" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                @foreach (var h in headers)
                                {
                                    @if (h == dateColName)
                                    {
                                        <MudTh Class="stickyCell tableHeader unWrapCell">
                                            <MudTableSortLabel SortBy="new Func<PatientIndicantDto, object>(x=>x.ValueDate)">
                                                <span class="tableHeaderText">@dateColName</span>
                                            </MudTableSortLabel>
                                        </MudTh>
                                    }
                                    else
                                    {
                                        <MudTh Class="tableHeader unWrapCell">
                                            <span class="tableHeaderText">@h</span>
                                        </MudTh>
                                    }
                                }
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="@dateColName" Class="stickyCell stickyWhiteBg unWrapCell alignRightCell vBorderColumn hBorderRow">@GetValueDate(context.ValueDate)</MudTd>
                                @foreach (var h in headers)
                                {
                                    @if (h != dateColName)
                                    {
                                        IndicantValueDto value = getValueByHeader(context, h);
                                        if (value != null)
                                        {
                                        <MudTd DataLabel="@value.Name" Class="vBorderColumn">@value.Value</MudTd>
                                        }
                                        else
                                        {
                                        <MudTd Class="vBorderColumn">-</MudTd>
                                            }

                                        }
                                    }
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager InfoFormat="{first_item}-{last_item} из {all_items}" RowsPerPageString="Строк:" />
                            </PagerContent>
                        </MudTable>
                    }
                    else
                    {
                        <MudText Class="emptyState" Typo="Typo.h5">@DoctorAppWeb.Client.Shared.EmptyStateMessages.Indications</MudText>
                    }
                </MudTabPanel>
            </MudTabs>
        </div>
    </div>
</MudPaper>

<style>
    .tableHeader {
        background-color: @DoctorAppWeb.Client.Shared.Colors.LightBlue;
    }
    .tableHeaderText {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray;
        font-weight: 600;
        line-height: 1rem;
    }
    .stickyWhiteBg {
        background: white;
    }
    .stickyCell {
        position: sticky;
        left: -1px;
    }
    .stickyCell:after {
        content: '';
        position: absolute;
        left: 0;
        bottom: -1px;
        width: 100%;
        border-bottom: 1px solid var(--mud-palette-table-lines);
    }
    .unWrapCell {
        white-space: nowrap;
    }
    .alignRightCell {
        text-align: right;
    }
    .vBorderColumn {
        border-right: 1px solid #eeeeef;
    }
    .hBorderRow {
        border-bottom: 1px solid #eeeeef;
    }
</style>

@code {   
    private const string dateColName = "Дата - время";

    private DateTime? maxValueDate;
    private DateTime? minValueDate;
    private DateTime? baseValueDate;
    private Dictionary<string, string[]> baseChartPalette;
    private CustomSettings customSettings { get; set; }

    public IEnumerable<string> headers;
    public bool showProgress = true;
    public IEnumerable<PatientIndicantDto> indicants { get; set; }
    public IEnumerable<IndicantChartDto> indCharts { get; set; }
    public IEnumerable<string> indHeadings { get; set; }

    private IndicantValueDto getValueByHeader(PatientIndicantDto context, string header)
    {
        return context.Indicant.Where(iValue => iValue.Name == header).FirstOrDefault();
    }

    private ChartOptions LineChartOptions(IndicantChartDto indChart)
    {
        ChartOptions chartOptions = new ChartOptions();
        chartOptions.YAxisLines = true;
        chartOptions.XAxisLines = true;
        chartOptions.InterpolationOption = InterpolationOption.NaturalSpline;
        if (indChart.PatientIndicant.Max(x => x.Name) == indChart.PatientIndicant.Min(x => x.Name))
        {
            chartOptions.DisableLegend = true;
            chartOptions.ChartPalette = baseChartPalette[indChart.Caption];
        }
        else
        {
            chartOptions.YAxisLines = true;
            chartOptions.XAxisLines = true;
            chartOptions.ChartPalette = baseChartPalette[indChart.Caption];
        }
        return chartOptions;
    }

    private string GetValueDate(DateTime? valueDate)
    {
        if (valueDate == null) { return ""; }
        if (Nullable.Compare<DateTime>(minValueDate, valueDate) == 0 || Nullable.Compare<DateTime>(maxValueDate, valueDate) == 0)
        {
            baseValueDate = null;
        }
        if (baseValueDate == null) { baseValueDate = valueDate; }
        if (((DateTime)baseValueDate).ToString("dd/MM/yyyy") != ((DateTime)valueDate).ToString("dd/MM/yyyy"))
        {
            baseValueDate = valueDate;
        }
        if (Nullable.Compare<DateTime>(baseValueDate, valueDate) == 0)
        {
            return (((DateTime)valueDate).ToString("dd/MM/yyyy HH:mm"));
        }
        else
        {
            return (((DateTime)valueDate).ToString("           HH:mm"));
        }
    }

    private string[] ChartLabels(IndicantChartDto indChartDto)
    {
        PatientNumericIndicantDto patIndicantDto = indChartDto.PatientIndicant.First();
        string[] chartLabels = new string[patIndicantDto.Indicant.Count()];
        int index = 0;
        foreach (NumericIndicantValueDto numIndicantValueDto in patIndicantDto.Indicant.OrderBy(x => x.ValueDate))
        {
            chartLabels[index] = numIndicantValueDto.ValueDate == null ? "" : ((DateTime)numIndicantValueDto.ValueDate).ToString("dd/MM");
            index++;
        }
        return chartLabels;
    }

    private List<double?> LineChartSeries(IndicantChartDto indChartDto)
    {
        List<ChartSeries> chartSeriesList = new List<ChartSeries>();

        List<double?> data = new List<double?>();
        foreach (PatientNumericIndicantDto patIndicantDto in indChartDto.PatientIndicant)
        {
            foreach (NumericIndicantValueDto numIndicantValueDto in patIndicantDto.Indicant.OrderBy(x => x.ValueDate))
            {
                data.Add((double)numIndicantValueDto.NumericValue);
            }
        }
        return data;
    }

    protected void PrepareIndicantTableHeaders()
    {
        List<string> indHeadingList = new List<string> { dateColName };
        if (indicants != null && indicants.Count() > 0)
        {
            foreach (PatientIndicantDto patIndicantDto in indicants) {
                //PatientIndicantDto patIndicantDto = indicants.FirstOrDefault();
                if (patIndicantDto != null && patIndicantDto.Indicant != null)
                {
                    foreach (IndicantValueDto indValueDto in patIndicantDto.Indicant)
                    {
                        if (!indHeadingList.Contains(indValueDto.Name))
                        {
                            indHeadingList.Add(indValueDto.Name);
                        }
                    }
                }
                minValueDate = indicants.Min(x => x.ValueDate);
                maxValueDate = indicants.Max(x => x.ValueDate);
            }
        }
        headers = indHeadingList;
    }

    private string GetHexRandomColor()
    {
        Random random = new Random();
        return System.Drawing.ColorTranslator.ToHtml(System.Drawing.Color.FromArgb((byte)random.Next(0, 255), (byte)random.Next(0, 255), (byte)random.Next(0, 255)));
    }

    private async Task<CustomSettings> GetCustomSettings()
    {
        CustomSettings customSettings;
        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            customSettings = db.CustomSettings.FirstOrDefault();
        }
        return customSettings != null ? customSettings : new CustomSettings();
    }

    protected Dictionary<string, string[]> PrepareIndicantChartPalettes()
    {
        var dictChartPalette = new Dictionary<string, string[]>();
        if (indCharts != null && indCharts.Count() > 0)
        {
            ChartOptions baseChartOptions = new ChartOptions();
            int i = 0;
            foreach (IndicantChartDto indChart in indCharts)
            {
                List<string> chartColors = new List<string>();
                for (int k = 1; k <= indChart.PatientIndicant.Count(); k++)
                {
                    if (baseChartOptions.ChartPalette != null && i < baseChartOptions.ChartPalette.Count())
                    {
                        chartColors.Add(baseChartOptions.ChartPalette[i]);
                        i++;
                    }
                    else
                    {
                        chartColors.Add(GetHexRandomColor()); //#4661EE"
                    }

                }
                dictChartPalette.Add(indChart.Caption, chartColors.ToArray());
            }
        }
        return dictChartPalette;
    }

    protected override async Task OnInitializedAsync()
    {
        showProgress = true;
        StateContainer.ShowDrawer = true;
        StateContainer.CurrentPage = Pages.Indications;
        customSettings = await GetCustomSettings();
        customSettings.MaxPeriodData = 666;
        indicants = await GetIndicants();
        indCharts = await GetIndicantCharts();
        PrepareIndicantTableHeaders();
        baseChartPalette = await Task.Run(PrepareIndicantChartPalettes);
        showProgress = false;
    }

    protected async Task<IEnumerable<PatientIndicantDto>> GetIndicants(bool Archive = false)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "Indicants/Table");
            request.Headers.Add("hServiceId", PatientService.HealthcareServiceId.ToString());
            request.Headers.Add("maxPeriodData", customSettings.MaxPeriodData.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(request);
            IEnumerable<PatientIndicantDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<PatientIndicantDto>>();
            return result;
        }
        catch (Exception ex)
        {
        }
        return null;
    }

    protected async Task<IEnumerable<IndicantChartDto>> GetIndicantCharts(bool Archive = false)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "Indicants/Chart");
            request.Headers.Add("hServiceId", PatientService.HealthcareServiceId.ToString());
            request.Headers.Add("maxPeriodData", customSettings.MaxPeriodData.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(request);
            IEnumerable<IndicantChartDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<IndicantChartDto>>();
            return result;
        }
        catch (Exception ex)
        {
        }
        return null;
    }
}