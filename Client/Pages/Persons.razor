@page "/persons"
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPatientsService PatientService
@inject NavigationManager navigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject StateContainer StateContainer

<Progress isVisible="@showProgress"></Progress>
<MudPaper>
    <div class="pageWrapper">
        <div class="pageHeader">
            <MudText Typo="Typo.h5">
                Пациенты
            </MudText>

            <div class="flexSpacer" />

            <MudIconButton Class="pale-icon" Icon="@Icons.Material.Outlined.Refresh"aria-label="refresh"></MudIconButton>
            <MudIconButton Class="pale-icon" OnClick="@(() => GoToCustomizationPersons())" Icon="@Icons.Material.Outlined.Settings" aria-label="settings"></MudIconButton>
        </div>

        <div class="tabWrapper">
            <MudTabs>
                <MudTabPanel OnClick="@(() => FilterMyPatientsClick())" Text="МОИ">
                </MudTabPanel>
                <MudTabPanel OnClick="@(() => FilterToMyDepartmentPatientsClick())" Text="ПОСТУПИВШИЕ">
                </MudTabPanel>
                <MudTabPanel OnClick="@(() => FilterInEmergencyPatientsClick())" Text="В ПРИЕМНОМ">
                </MudTabPanel>
                <MudTabPanel OnClick="@(() => FilterAllPatientsClick())" Text="ВСЕ ПАЦИЕНТЫ">
                    <MudGrid Class="filtersWrapper">
                        <MudItem xs="10">
                            <MudTextField FullWidth="true" @bind-Value="SearchQuery" Label="ФИО или номер ИБ" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton @onclick="FindPatients" Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Class="searchButton" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect @bind-Value="@SelectedDepartment" T="string" Label="Отделение" Variant="Variant.Outlined">
                                @foreach (Department dep in Departments)
                                {
                                    <MudSelectItem T="string" Value="@dep.BusinessElementShortName">@dep.BusinessElementShortName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect @bind-Value="@SelectedDoctor" T="string" Label="Лечащий врач" Variant="Variant.Outlined">
                                @foreach (DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor doctor in Doctors)
                                {
                                    string doc = doctor.SurName + " " + doctor.FirstName + " " + doctor.Patronymic;
                                    <MudSelectItem T="string" Value="@doc">@doc</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>

                </MudTabPanel>
            </MudTabs>
        </div>

        <MudTable Items="@AllPersons" Hover="false" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh Class="tableHeader"></MudTh>
                @foreach (var field in CustomGridPerson)
                {
                    if (field.WhereToDisplay)
                    {
                        <MudTh Class="tableHeader">
                            <MudTableSortLabel SortBy="new Func<Patient, object>(x=>x.GetPropertyValue(field.NameColumnEn))">
                                <span class="tableHeaderText">@field.NameColumnRu</span>
                            </MudTableSortLabel>
                        </MudTh>
                    }

                }
                <MudTh Class="stickyCell tableHeader"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" OnClick="@(() => ShowBtnPress(context.PersonID))" Size="Size.Large" class=@(context.ShowDetails ? "arrowDown" : "")></MudIconButton>
                </MudTd>


                @foreach (var field in CustomGridPerson)
                {
                    if (field.WhereToDisplay)
                    {
                        <MudTd>
                            <MudText Typo="Typo.body1">@context.GetPropertyValue(field.NameColumnEn)</MudText>
                        </MudTd>
                    }
                }
                <MudTd Class="stickyCell stickyWhiteBg">
                    <MudIconButton Class="goToPatientBtn" Icon="@DoctorIcons.ArrowRight" OnClick="@(() => {
                                                                                 string titleInfo = context.Lastname + " " + context.Firstname + " " + context.Patronymic + " " + context.Birthday + " (" + context.Age + ") " + context.StayDep + " " + context.ServiceCaseNumber;
                                                                                 GoToPatientInfo(context.PersonID, titleInfo);
                                                                                 })" Variant="Variant.Outlined" Color="Color.Secondary">
                    <!--<DoctorAppWeb.Client.Pages.IconComponents.ArrowRight />-->
                    </MudIconButton>
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    string fullName = context.Lastname + " " + context.Firstname + " " + context.Patronymic;
                    

                    <MudTr>
                        <td class="green"></td>
                        <td class="green" colspan="@CustomGridPerson.Count">
                            <div class="descriprion">
                                <MudGrid>
                                    @foreach (var field in CustomGridPerson)
                                    {
                                        if (!field.WhereToDisplay)
                                        {
                                            string value = context.GetPropertyValue(field.NameColumnEn);
                                            int xs;
                                            int threshold = 20;
                                            if (value?.Length > threshold)
                                            {
                                                xs = 12; // full line
                                            }
                                            else
                                            {
                                                xs = 6; // half line
                                            }
                                            <MudItem xs="@xs">
                                                <span class="descriprion-title" Color="Color.Secondary">@field.NameColumnRu: </span><span class="descriprion-content">@value</span>
                                            </MudItem>

                                        }
                                    }
                                </MudGrid>
                            </div>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
            <PagerContent>
                <MudTablePager InfoFormat="{first_item}-{last_item} из {all_items}" RowsPerPageString="Строк:" />
            </PagerContent>
        </MudTable>
    </div>
</MudPaper>

<style>
    #mainMenu {
        display: none;
    }

    .pageHeader {
        display: flex;
        align-items: baseline;
    }

    .flexSpacer {
        flex: 1;
    }

    .tabWrapper {
        padding-top: 54px;
        padding-bottom: 38px;
    }
    .arrowDown {
        transform: rotate(180deg);
    }
    .green {
        background-color: @DoctorAppWeb.Client.Shared.Colors.LightGreen;
    }
    .descriprion {
        width: calc(100vw - 163px);
        padding: 12px;
    }
    .descriprion-title {
        color:  @DoctorAppWeb.Client.Shared.Colors.Green;
        font-size:34px;
    }
    .descriprion-content {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray;
        font-size: 34px;
    }
    .tableHeader {
        background-color: @DoctorAppWeb.Client.Shared.Colors.LightBlue;
    }
    .stickyWhiteBg {
        background: white;
    }
    .tableHeaderText {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray;
        font-weight: 600;
        line-height: 1rem;
    }
    .stickyCell {
        position: sticky;
        right: 0;
    }
    .searchButton {
        width: 100%;
        height: 2.3rem;
        margin-top: 6px;
    }
    .filtersWrapper {
        margin-top: 2rem;
    }
    .goToPatientBtn {
        width: 80px;
    }
    .pale-icon {
        color: @DoctorAppWeb.Client.Shared.Colors.BorderGray;
        width: 1.5rem;
        height: 1.5rem;
    }
</style>

@code{



    async Task GoToCustomizationPersons()
    {
        navigationManager.NavigateTo(PatientService.CurrentPage + "Custom");
    }

    async Task GoToPatientInfo(Guid id, string title)
    {
        StateContainer.AppTitle = title;
        PatientService.CurrentPatient = id;
        StateContainer.CurrentPage = Pages.WhatsNew;
        navigationManager.NavigateTo(Pages.WhatsNew);
    }

    void FindPatients()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery) && !string.IsNullOrWhiteSpace(SelectedDepartment) && !string.IsNullOrWhiteSpace(SelectedDoctor))
        {
            UpdatePagePersons();
            PersonsCount = PatientService.AllPersons.Count;
        }
        else
        {
            List<Tuple<Patient, string>> searchIndex = PatientService.AllPersons.Select(x => new Tuple<Patient, string>(x, x.Lastname?.ToLower() + x.Firstname?.ToLower() + x.Patronymic?.ToLower() + x.ServiceCaseNumber?.ToLower())).ToList();
            List<Patient> tempPatientsResult = null;

            if (!string.IsNullOrWhiteSpace(SearchQuery))
            {
                tempPatientsResult = searchIndex.Where(x => x.Item2.Contains(SearchQuery.ToLower())).Select(x => x.Item1).ToList();
            }

            if (!string.IsNullOrWhiteSpace(SelectedDepartment))
            {
                tempPatientsResult = (tempPatientsResult != null ? tempPatientsResult : searchIndex.Select(x => x.Item1)).Where(x => x.ResponsibleDep?.ToLower() == SelectedDepartment.ToLower()).ToList();
            }

            if (!string.IsNullOrWhiteSpace(SelectedDoctor))
            {
                tempPatientsResult = (tempPatientsResult != null ? tempPatientsResult : searchIndex.Select(x => x.Item1)).Where(x => x.Doctor?.ToLower() == SelectedDoctor?.ToLower()).ToList();
            }

            tempPatientsResult = tempPatientsResult ?? new List<Patient>();
            PersonsCount = tempPatientsResult.Count();
            UpdatePagePersons();
        }
    }

    private void ShowBtnPress(Guid id)
    {
        Console.WriteLine(id);
        Patient tmpPerson = AllPersons.First(f => f.PersonID == id);
        tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    //Стили
    private string MyPatientsStyle { get; set; }
    private string DepPatientsStyle { get; set; }
    private string EmergencyPatientStyle { get; set; }
    private string AllPatientStyle { get; set; }
    private const string StyleForFilter = "text-decoration:underline; color: #3f51b5;";
    //Конец стилей

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    public string FullDocName { get; set; }
    private string GetDataButtonLabel;
    private Patient[] AllPersons;
    public string SelectedDepartment = " ";
    public string SelectedDoctor = " ";
    public IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor> Doctors { get; set; }
    public IEnumerable<Department> Departments { get; set; }
    private int PageSize = 10;
    private string SearchQuery { get; set; }
    private List<CustomGridPerson> CustomGridPerson { get; set; }
    private List<CustomGroupPerson> CustomGroupPerson { get; set; }
    public bool showProgress = true;


    /// <summary>
    /// Кол-во пациентов, удовлетворяющих поисковому выражению
    /// </summary>
    private int PersonsCount;

    protected override async Task OnInitializedAsync()
    {
        StateContainer.ShowDrawer = false;
        StateContainer.AppTitle = "";
        showProgress = true;
        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            Departments = db.Departments;
            Doctors = db.Doctors;
            CustomGroupPerson = await ConvertToObjCustomGroup(db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgroupperson")?.FormSettings);
            CustomGridPerson = await ConvertJsonToObjPersonCustomization(db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgridperson")?.FormSettings);
            string filterName = CustomGroupPerson.FirstOrDefault(x => x.Selected)?.NameButtonEn;
            PatientService.FilterType = 7; //УДАЛИТЬ
            switch ("AllPatients") //ИСПРАВИТЬ НА ФИЛЬТРТАЙП
            {
                case "MyPatient": PatientService.FilterType = 1; break;
                case "InEmergencyRoom": PatientService.FilterType = 2; break;
                case "ToMyDepartments": PatientService.FilterType = 4; break;
                case "AllPatients": PatientService.FilterType = 7; break;
                default: PatientService.FilterType = 1; break;
            }
        }
        PatientService.CurrentPage = "persons";
        if (PatientService.FilterType == 0 || !PatientService.FilterType.HasValue)
        {
            PatientService.FilterType = 1;
        }
        string userName = (await AuthenticationState).User.Identity.Name;
        PatientService.UserName = userName;
        PatientService.AllPersons = (await LoadDataToIndexedDb())?.ToList();
        if (PatientService.AllPersons != null)
        {
            PersonsCount = PatientService.AllPersons.Count();
            UpdatePagePersons();
        }
        showProgress = false;
    }

    protected void UpdatePagePersons(bool resetLastPageNumber = false)
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            AllPersons = PatientService.AllPersons.ToArray();
        }
        else
        {
            AllPersons = PatientService.AllPersons.Where(p => (p.Lastname + " " + p.Firstname + " " + p.Patronymic).ToLower().Contains(SearchQuery.ToLower())).ToArray();
        }
    }

    private async Task FilterMyPatientsClick()
    {
        showProgress = true;
        SearchQuery = string.Empty;
        DepPatientsStyle = EmergencyPatientStyle = AllPatientStyle = null;
        MyPatientsStyle = StyleForFilter;
        PatientService.FilterType = 1;
        await ShowData();
        showProgress = false;
    }

    private async Task FilterToMyDepartmentPatientsClick()
    {
        showProgress = true;
        SearchQuery = string.Empty;
        MyPatientsStyle = EmergencyPatientStyle = AllPatientStyle = null;
        DepPatientsStyle = StyleForFilter;
        PatientService.FilterType = 4;
        await ShowData();
        showProgress = false;
    }

    private async Task FilterInEmergencyPatientsClick()
    {
        showProgress = true;
        SearchQuery = string.Empty;        
        DepPatientsStyle = MyPatientsStyle = AllPatientStyle = null;
        EmergencyPatientStyle = StyleForFilter;
        PatientService.FilterType = 2;
        await ShowData();
        showProgress = false;
    }

    private async Task FilterAllPatientsClick()
    {
        showProgress = true;
        DepPatientsStyle = MyPatientsStyle = EmergencyPatientStyle = null;
        AllPatientStyle = StyleForFilter;
        PatientService.FilterType = 7;
        await ShowData();
        showProgress = false;
    }

    private async Task ShowData()
    {
        PatientService.AllPersons = await LoadDataToIndexedDb(true);
        if (PatientService.AllPersons != null)
        {
            PersonsCount = PatientService.AllPersons.Count();
            UpdatePagePersons(true);
        }
        StateHasChanged();
    }

    private async Task<List<Patient>> LoadDataToIndexedDb(bool force = false)
    {
        try
        {
            string userName = (await AuthenticationState).User.Identity.Name;
            var request = new HttpRequestMessage(HttpMethod.Get, "Persons");
            request.Headers.Add("FilterType", PatientService.FilterType?.ToString());
            request.Headers.Add("UserLogin", userName);
            using var httpResponse = await Http.SendAsync(request);
            IEnumerable<PatientDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<PatientDto>>();
            if (result != null && result.Any() || force)
            {
                PatientService.AllPersons = new List<Patient>();
                using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
                {
                    List<Patient> patients = new List<Patient>();
                    db.Patients.Clear();
                    await db.SaveChanges();
                    foreach (PatientDto person in result)
                    {
                        Patient patient = new Patient
                        {
                            PersonID = person.PersonID,
                            Firstname = person.Firstname,
                            Lastname = person.Lastname,
                            Patronymic = person.Patronymic,
                            Age = person.Age,
                            Birthday = person.Birthday,
                            Bed = person.Bed,
                            Room = person.Room,
                            isChanged = person.isChanged,
                            VersionID = person.VersionID,
                            StayDep = person.StayDep,
                            ResponsibleDep = person.ResponsibleDep,
                            InResuscitation = person.InResuscitation,
                            ObservationMode = person.ObservationMode,
                            PhysicalRestraint = person.PhysicalRestraint,
                            ObservationType = person.ObservationType,
                            ServiceCaseNumber = person.ServiceCaseNumber,
                            Doctor = person.Doctor,
                            Diagnos = person.Diagnos,
                            SDDepTreatmentCase = person.SDDepTreatmentCase,
                            SDInpatientServiceCase = person.SDInpatientServiceCase,
                            AgeDescription = person.AgeDescription,
                            SexEnum = person.SexEnum,
                            DiagnosAnamnesisID = person.DiagnosAnamnesisID,
                            LifeAnamnesisID = person.LifeAnamnesisID,
                            Benefits = person.Benefits,
                            HealthcareServiceId = person.HealthcareServiceId,
                            HelpForm = person.HelpForm,
                            IsWorking = person.IsWorking,
                            PathologyАnamnesisID = person.PathologyАnamnesisID,
                            SDReceptionCase = person.SDReceptionCase,
                            PersonnelID = person.PersonnelID,
                            AdmissionInfo = new AdmissionInfo { Dtc = person.AdmissionInfo?["Dtc"], InpatientSrv = person.AdmissionInfo?["InpatientSrv"], ReceptCase = person.AdmissionInfo?["ReceptCase"] }
                        };
                        db.Patients.Add(patient);
                        patients.Add(patient);
                    }
                    await db.SaveChanges();
                    return patients;
                }
            }
        }
        catch
        {

        }
        return null;
    }

    private async Task<List<CustomGridPerson>> ConvertJsonToObjPersonCustomization(string json)
    {
        List<CustomGridPerson> gridCustomization = new List<CustomGridPerson>();
        foreach (List<object> customization in string.IsNullOrWhiteSpace(json) ? DefaultGridPersonCustomization.GetDefaults() : JsonConvert.DeserializeObject<GridPersonCustomization>(json).customGridPerson)
        {
            CustomGridPerson customGridPerson = new CustomGridPerson();
            customGridPerson.NameColumnEn = customization.ElementAtOrDefault(0)?.ToString();
            customGridPerson.NameColumnRu = customization.ElementAtOrDefault(1)?.ToString();
            customGridPerson.OrderColumn = int.Parse(customization.ElementAtOrDefault(2)?.ToString() ?? int.MaxValue.ToString());
            customGridPerson.VisibilityColumn = bool.Parse(customization.ElementAtOrDefault(3)?.ToString() ?? false.ToString());
            customGridPerson.AvailableGroupings = bool.Parse(customization.ElementAtOrDefault(4)?.ToString() ?? false.ToString());
            customGridPerson.IsGrouping = bool.Parse(customization.ElementAtOrDefault(5)?.ToString() ?? false.ToString());
            customGridPerson.WhereToDisplay = bool.Parse(customization.ElementAtOrDefault(6)?.ToString() ?? false.ToString());
            customGridPerson.DateUpdate = customization.ElementAtOrDefault(7) as DateTime?;
            gridCustomization.Add(customGridPerson);
        }
        if (string.IsNullOrWhiteSpace(json))
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                PagesSettings pagesSetting = db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgridperson");
                if (pagesSetting == null)
                {
                    pagesSetting = new PagesSettings { FormID = "customGridPerson" };
                    db.PagesSettings.Add(pagesSetting);
                }
                if (string.IsNullOrWhiteSpace(pagesSetting.FormSettings))
                {
                    pagesSetting.FormSettings = JsonConvert.SerializeObject(new GridPersonCustomization { customGridPerson = DefaultGridPersonCustomization.GetDefaults() });
                }

                await db.SaveChanges();
            }
        }
        return gridCustomization;
    }

    private async Task<List<CustomGroupPerson>> ConvertToObjCustomGroup(string json)
    {
        List<CustomGroupPerson> customGroupPersons = new List<CustomGroupPerson>();
        foreach (List<object> customization in string.IsNullOrWhiteSpace(json) ? DefaultGroupPersonCustomization.GetDefaults() : JsonConvert.DeserializeObject<GroupPersonCustomization>(json).customGroupPerson)
        {
            CustomGroupPerson customGroupPerson = new CustomGroupPerson();
            customGroupPerson.NameButtonEn = customization.ElementAtOrDefault(0)?.ToString();
            customGroupPerson.NameButtonRu = customization.ElementAtOrDefault(1)?.ToString();
            customGroupPerson.Selected = bool.Parse(customization.ElementAtOrDefault(2)?.ToString() ?? false.ToString());
            customGroupPerson.DateUpdate = customization.ElementAtOrDefault(3) as DateTime?;
            customGroupPersons.Add(customGroupPerson);
        }

        if (string.IsNullOrWhiteSpace(json))
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                PagesSettings pagesSetting = db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgroupperson");
                if (pagesSetting == null)
                {
                    pagesSetting = new PagesSettings { FormID = "customGroupPerson" };
                    db.PagesSettings.Add(pagesSetting);
                }
                if (string.IsNullOrWhiteSpace(pagesSetting.FormSettings))
                {
                    pagesSetting.FormSettings = JsonConvert.SerializeObject(new GroupPersonCustomization { customGroupPerson = DefaultGroupPersonCustomization.GetDefaults() });
                }

                await db.SaveChanges();
            }
        }
        return customGroupPersons;
    }
}
