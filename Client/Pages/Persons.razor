@page "/personlist"
@using DoctorAppWeb.Shared
@using PatientsWcf
@using IndexedDB.Blazor;
@using DoctorAppWeb.Shared.Models;
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
<h1>Мои пациенты</h1>
@if (persons == null)
{
    <p><em>Загрузка...</em></p>
}
else
{    
    <style>
        .persons-top-container
        {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
        }
        .persons-bottom-container {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
        }
    </style>
    <div class="persons-top-container alert alert-secondary">
        <span class="btn">Всего пациентов @persons.Count()</span>
        <span style="justify-self: flex-end; margin-left: auto;">
            <button class="btn btn-info" type="button" @onclick="OnFilterButtonClicked">Изменить отбор</button>
        </span>        
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">
                    <input type="search" 
                           class="form-control ds-input" 
                           id="search-input" 
                           placeholder="Поиск..." aria-label="Поиск для..." 
                           autocomplete="off" spellcheck="false" 
                           role="combobox" aria-autocomplete="list" 
                           aria-expanded="false" 
                           aria-owns="algolia-autocomplete-listbox-2" dir="auto" 
                           style="position: relative; vertical-align: top;"
                           @onchange="@OnSearchQueryChangedAsync">
                </th>
                <th scope="col">
                    <span class="btn">Возраст</span>
                </th>
                <th scope="col">
                    <span class="btn">Отделение</span>
                </th>                
            </tr>
        </thead>
        <tbody>
            @foreach (PersonDto person in persons.Take(10))
            {
                <tr>
                    <th scope="row">@person.Lastname @person.Firstname @person.Patronymic</th>
                    <td>30</td>
                    <td>Терапевтическое</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="3">
                    <div class="persons-bottom-container">
                        <span style="justify-self: flex-end; margin-left: auto;" class="btn">
                            Показано 1-10 из @persons.Count()
                        </span>
                        <button class="btn" @onclick="@OnPrevPageClicked">&lt;</button>
                        <button class="btn" @onclick="@OnNextPageClicked">&gt;</button>
                    </div>
                </th>
            </tr>
        </tfoot>
    </table>






 

}

@code {

    /// <summary>
    /// Пациенты, отображаемые на странице
    /// </summary>
    private PersonDto[] persons;

    /// <summary>
    /// Номер страницы
    /// </summary>
    private int PageNumber = 1;

    /// <summary>
    /// Выполняется по событию изменения текста в поле поиска
    /// </summary>
    /// <returns></returns>
    protected async Task OnSearchQueryChangedAsync()
    {

    }

    /// <summary>
    /// Выполняется по событию нажатия кнопки "Изменить отбор"
    /// </summary>
    /// <returns></returns>
    protected async Task OnFilterButtonClicked()
    {

    }

    /// <summary>
    /// Выполняется по событию нажатия кнопки перехода на предыдущую страницу
    /// </summary>
    /// <returns></returns>
    protected async Task OnPrevPageClicked()
    {
    }

    /// <summary>
    /// Выполняется по событию нажатия кнопки перехода на следующую страницу
    /// </summary>
    /// <returns></returns>
    protected async Task OnNextPageClicked()
    {
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        persons = await Http.GetFromJsonAsync<PersonDto[]>("Persons");

        using (var db = await this.DbFactory.Create<ExampleDb>())
        {
            db.Persons.Add(new Person()
            {
                FirstName = "First",
                LastName = "Last"
            });
            await db.SaveChanges();
        }
    }
}
