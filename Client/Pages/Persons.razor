@page "/persons"
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPatientsService PatientService
@inject NavigationManager navigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
<!--<div style="float: left"><h3>Пациенты</h3></div><div style="float: right"><img src="refresh.svg" />&nbsp;&nbsp;&nbsp;<img src="settings.svg" @onclick="GoToCustomizationPersons"></div>
<br />
<br />
<br />
<div style="float: right" id="filter">
    <span @onclick=FilterMyPatientsClick style="@MyPatientsStyle">Мои</span>&nbsp;&nbsp;&nbsp;<span @onclick=FilterToMyDepartmentPatientsClick style="@DepPatientsStyle">Поступившие</span>&nbsp;&nbsp;&nbsp;<span @onclick=FilterInEmergencyPatientsClick style="@EmergencyPatientStyle">В приемном</span>&nbsp;&nbsp;&nbsp;<span @onclick=FilterAllPatientsClick style="@AllPatientStyle">Все пациенты</span>
</div>
<div id="searchPatients" style="display: none;">
    <br />
    <input type="search" style="width: 96%;" @oninput="@(x => SearchQuery = x.Value.ToString())">
    <button style="background-color:#3F51B5;" @onclick="FindPatients"><img src="Search.svg" width="50" height="24"></button>
    <div style="float: left">
        <MatSelect Label="Отделение" @bind-Value="@SelectedDepartment">
            <MatOption TValue="string" Value="@(string.Format(" "))">Не выбрано</MatOption>
            @if (Departments != null)
            {
                @foreach (Department dep in Departments)
                {
                    <MatOption TValue="string" Value="@dep.BusinessElementShortName">@dep.BusinessElementShortName</MatOption>
                }
            }
        </MatSelect>
    </div>
    <div style="float: right">
        <MatSelect Label="Врач" @bind-Value="@SelectedDoctor">
            <MatOption TValue="string" Value="@(string.Format(" "))">Не выбран</MatOption>
            @if (Doctors != null)
            {
                @foreach (DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor doctor in Doctors)
                {
                    string doc = doctor.PersonSurname + " " + doctor.PersonFirstName + " " + doctor.PersonPatronymic;
                    <MatOption TValue="string" Value="@doc">@doc</MatOption>
                }
            }
        </MatSelect>
    </div>
    <br />
</div>
<table class="table">
    <thead>
        <tr>
            <th>
                <span class="btn">ФИО</span>
            </th>
            <th>
                <span class="btn">Возраст</span>
            </th>
            <th>
                <span class="btn">Отделение</span>
            </th>
        </tr>
    </thead>
</table>
<MatAccordion Multi="false" HideToggle="true">
    @if (PersonsOnPage != null && PersonsOnPage.Any())
    {
        @foreach (Patient patient in PersonsOnPage)
        {
            string fullName = patient.SurName + " " + patient.FirstName + " " + patient.Patronymic;
            string titleInfo = patient.SurName + " " + patient.FirstName + " " + patient.Patronymic + " " + patient.BirthDay + " (" + patient.Age + ") " + patient.StayDep + " " + patient.ServiceCaseNumber;
            <MatExpansionPanel>
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>
                        <div id="accordionHeader">
                            <div>@fullName</div><div>@patient.Age</div><div>@patient.StayDep<img class="goToPatient" src="ToPatient.svg" @onclick="@(x => GoToPatientInfo(patient.PersonID, titleInfo))" /></div>
                        </div>
                    </MatExpansionPanelHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <div class="mainInfo">
                        <div>
                            @if (patient.Gender == 1)
                            {
                                <img class="imgGender" src="Male.svg">
                            }
                            else
                            {
                                <img class="imgGender" src="Female.svg">
                            }
                            @patient.BirthDay @patient.ServiceCaseNumber
                        </div>
                        <br />
                        <div>
                            <span class="descriptionMainPage">Поступил:&nbsp;</span>
                        </div>
                        <div>
                            <span class="descriptionMainPage">Врач:&nbsp;</span><span>@patient.Doctor&nbsp;</span><span class="descriptionMainPage">Диагноз:&nbsp;</span><span>&nbsp;</span><span class="descriptionMainPage">Койка:&nbsp;</span><span>&nbsp;</span>
                        </div>
                    </div>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        }
        <div>
            <MatPaginator Length="@PersonsCount" PageSize="@PageSize" Page="@OnPage"></MatPaginator>
        </div>
    }
</MatAccordion> -->

<div class="pageHeader">
    <MudText Typo="Typo.h3">
        Пациенты
    </MudText>

    <div class="flexSpacer" />

    <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Size="Size.Large" aria-label="refresh"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Outlined.Settings" Size="Size.Large" aria-label="settings"></MudIconButton>
</div>

<div class="tabWrapper">

</div>

<MudTable Class="fullWidth" Items="@PersonsOnPage" Hover="true" Breakpoint="Breakpoint.Sm">
    <ColGroup>
        <col style="width:300px;" />
        <col style="width:100px;" />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh></MudTh>
        @foreach (var field in CustomGridPerson)
        {
            <MudTh>@field.NameColumnRu</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd><MudIconButton Icon="@Icons.Material.Filled.ChevronRight" OnClick="@(() => ShowBtnPress(context.PersonID))" Size="Size.Large" class=@(context.ShowDetails ? "arrowDown" : "")></MudIconButton></MudTd>


        @foreach (var field in CustomGridPerson)
        {
            <MudTd>
                @context.GetPropertyValue(field.NameColumnEn)
            </MudTd>
        }

    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            string fullName = context.SurName + " " + context.FirstName + " " + context.Patronymic;
            string titleInfo = context.SurName + " " + context.FirstName + " " + context.Patronymic + " " + context.BirthDay + " (" + context.Age + ") " + context.StayDep + " " + context.ServiceCaseNumber;

            <MudTr>
                <td class="green"></td>
                <td class="green" colspan="@CustomGridPerson.Count">
                    <div class="descriprion">
                            <MudGrid>
                                <MudItem xs="1">
                                    @if (context.Gender == 1)
                                    {
                                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.Male" />
                                    }
                                    else
                                    {
                                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.Female" />
                                    }
                                </MudItem>
                                <MudItem xs="3">
                                    <span class="descriprion-content">@context.BirthDay</span>
                                </MudItem>
                                <MudItem xs="3">
                                    <span class="descriprion-content">ИБ @context.ServiceCaseNumber</span>
                                </MudItem>
                            </MudGrid>

                            <MudGrid>
                                <MudItem xs="4">
                                    <span class="descriprion-title" Color="Color.Secondary">Врач:</span><span class="descriprion-content">@context.Doctor</span>
                                </MudItem>
                                <MudItem xs="4">
                                    <span class="descriprion-title">Диагноз:</span><span class="descriprion-content">@context.Diagnos</span>
                                </MudItem>
                                <MudItem xs="4">
                                    <span class="descriprion-title">Койка:</span><span class="descriprion-content">@context.Bed</span>
                                </MudItem>
                            </MudGrid>
                    </div>
                </td>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>
@CustomGridPerson

<style>
    #mainMenu {
        display: none;
    }

    .pageHeader {
        display: flex;
        align-items: baseline;
    }

    .flexSpacer {
        flex: 1;
    }

    .tabWrapper {
        display: flex;
        flex-direction: row-reverse;
    }
    .arrowDown {
        transform: rotate(90deg);
    }
    .green {
        background-color: @DoctorAppWeb.Client.Shared.Colors.LightGreen;
    }
    .descriprion {
        width: calc(100vw - 163px);
        padding: 12px;
    }
    .descriprion-title {
        color:  @DoctorAppWeb.Client.Shared.Colors.Green;
        font-size:34px;
    }
    .descriprion-content {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray;
        font-size: 34px;
    }
    .fullWidth {
        width: calc(100vw - 70px);
    }
</style>

@code{



    async Task GoToCustomizationPersons()
    {
        await JSRuntime.InvokeVoidAsync("visibleMenu", false);
        navigationManager.NavigateTo(PatientService.CurrentPage + "Custom");
    }

    async Task GoToPatientInfo(Guid id, string title)
    {
        await JSRuntime.InvokeVoidAsync("visibleMenu", true);
        await JSRuntime.InvokeVoidAsync("titleHeader", title);
        PatientService.CurrentPatient = id;
        navigationManager.NavigateTo("whatisnew");
    }

    void OnPage()
    {

    }

    void FindPatients()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery) && !string.IsNullOrWhiteSpace(SelectedDepartment) && !string.IsNullOrWhiteSpace(SelectedDoctor))
        {
            UpdatePagePersons();
            PersonsCount = PatientService.AllPersons.Count;
        }
        else
        {
            List<Tuple<Patient, string>> searchIndex = PatientService.AllPersons.Select(x => new Tuple<Patient, string>(x, x.SurName?.ToLower() + x.FirstName?.ToLower() + x.Patronymic?.ToLower() + x.ServiceCaseNumber?.ToLower())).ToList();
            List<Patient> tempPatientsResult = null;

            if (!string.IsNullOrWhiteSpace(SearchQuery))
            {
                tempPatientsResult = searchIndex.Where(x => x.Item2.Contains(SearchQuery.ToLower())).Select(x => x.Item1).ToList();
            }

            if (!string.IsNullOrWhiteSpace(SelectedDepartment))
            {
                tempPatientsResult = (tempPatientsResult != null ? tempPatientsResult : searchIndex.Select(x => x.Item1)).Where(x => x.ResponsibleDep?.ToLower() == SelectedDepartment.ToLower()).ToList();
            }

            if (!string.IsNullOrWhiteSpace(SelectedDoctor))
            {
                tempPatientsResult = (tempPatientsResult != null ? tempPatientsResult : searchIndex.Select(x => x.Item1)).Where(x => x.Doctor?.ToLower() == SelectedDoctor?.ToLower()).ToList();
            }

            tempPatientsResult = tempPatientsResult ?? new List<Patient>();

            PersonsOnPage = tempPatientsResult.Skip(PageNumber * PageSize).Take(PageSize).ToArray();
            PersonsCount = tempPatientsResult.Count();
        }
    }

    private void ShowBtnPress(Guid id)
    {
        Console.WriteLine(id);
        Patient tmpPerson = PersonsOnPage.First(f => f.PersonID == id);
        tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    //Стили
    private string MyPatientsStyle { get; set; }
    private string DepPatientsStyle { get; set; }
    private string EmergencyPatientStyle { get; set; }
    private string AllPatientStyle { get; set; }
    private const string StyleForFilter = "text-decoration:underline; color: #3f51b5;";
    //Конец стилей

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    public string FullDocName { get; set; }
    private string GetDataButtonLabel;
    private Patient[] PersonsOnPage;
    public string SelectedDepartment = " ";
    public string SelectedDoctor = " ";
    public IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor> Doctors { get; set; }
    public IEnumerable<Department> Departments { get; set; }
    private int PageSize = 10;
    private string SearchQuery { get; set; }
    private List<CustomGridPerson> CustomGridPerson { get; set; }
    private List<CustomGroupPerson> CustomGroupPerson { get; set; }


    /// <summary>
    /// Кол-во пациентов, удовлетворяющих поисковому выражению
    /// </summary>
    private int PersonsCount;

    private int PageNumber = 0;

    protected void OnPrevPageClicked()
    {
        this.PageNumber--;
        this.UpdatePagePersons();
    }

    protected void OnNextPageClicked()
    {
        this.PageNumber++;
        this.UpdatePagePersons();
    }

    protected override async Task OnInitializedAsync()
    {
        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            Departments = db.Departments;
            Doctors = db.Doctors;
            CustomGroupPerson = await ConvertToObjCustomGroup(db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgroupperson")?.FormSettings);
            CustomGridPerson = await ConvertJsonToObjPersonCustomization(db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgridperson")?.FormSettings);
            string filterName = CustomGroupPerson.FirstOrDefault(x => x.Selected)?.NameButtonEn;
            PatientService.FilterType = 7; //УДАЛИТЬ
            switch ("AllPatients") //ИСПРАВИТЬ НА ФИЛЬТРТАЙП
            {
                case "MyPatient": PatientService.FilterType = 1; break;
                case "InEmergencyRoom": PatientService.FilterType = 2; break;
                case "ToMyDepartments": PatientService.FilterType = 4; break;
                case "AllPatients": PatientService.FilterType = 7; break;
                default: PatientService.FilterType = 1; break;
            }
        }
        PatientService.CurrentPage = "persons";
        if (PatientService.FilterType == 0 || !PatientService.FilterType.HasValue)
        {
            PatientService.FilterType = 1;
        }
        string userName = (await AuthenticationState).User.Identity.Name;
        PatientService.UserName = userName;
        PatientService.AllPersons = (await LoadDataToIndexedDb())?.ToList();
        if (PatientService.AllPersons != null)
        {
            PersonsCount = PatientService.AllPersons.Count();
            UpdatePagePersons();
        }
    }

    protected void UpdatePagePersons(bool resetLastPageNumber = false)
    {
        PageNumber = resetLastPageNumber ? 0 : PageNumber;
        if (string.IsNullOrEmpty(SearchQuery))
        {
            PersonsOnPage = PatientService.AllPersons.Skip(PageNumber * PageSize).Take(PageSize).ToArray();
        }
        else
        {
            PersonsOnPage = PatientService.AllPersons.Where(p => (p.SurName + " " + p.FirstName + " " + p.Patronymic).ToLower().Contains(SearchQuery.ToLower())).Skip(PageNumber * PageSize).Take(PageSize).ToArray();
        }
    }

    private void FilterMyPatientsClick()
    {
        SearchQuery = string.Empty;
        JSRuntime.InvokeVoidAsync("visibleSearchPatientsInput", false);
        DepPatientsStyle = EmergencyPatientStyle = AllPatientStyle = null;
        MyPatientsStyle = StyleForFilter;
        PatientService.FilterType = 1;
        ShowData();
    }

    private void FilterToMyDepartmentPatientsClick()
    {
        SearchQuery = string.Empty;
        JSRuntime.InvokeVoidAsync("visibleSearchPatientsInput", false);
        MyPatientsStyle = EmergencyPatientStyle = AllPatientStyle = null;
        DepPatientsStyle = StyleForFilter;
        PatientService.FilterType = 4;
        ShowData();
    }

    private void FilterInEmergencyPatientsClick()
    {
        SearchQuery = string.Empty;
        JSRuntime.InvokeVoidAsync("visibleSearchPatientsInput", false);
        DepPatientsStyle = MyPatientsStyle = AllPatientStyle = null;
        EmergencyPatientStyle = StyleForFilter;
        PatientService.FilterType = 2;
        ShowData();
    }

    private void FilterAllPatientsClick()
    {
        DepPatientsStyle = MyPatientsStyle = EmergencyPatientStyle = null;
        AllPatientStyle = StyleForFilter;
        PatientService.FilterType = 7;
        ShowData(true);
    }

    private async Task ShowData(bool isAllPatients = false)
    {
        PatientService.AllPersons = await LoadDataToIndexedDb(true);
        if (PatientService.AllPersons != null)
        {
            PersonsCount = PatientService.AllPersons.Count();
            UpdatePagePersons(true);
        }
        if (isAllPatients)
            JSRuntime.InvokeVoidAsync("visibleSearchPatientsInput", true);
        StateHasChanged();
    }

    private async Task<List<Patient>> LoadDataToIndexedDb(bool force = false)
    {
        try
        {
            string userName = (await AuthenticationState).User.Identity.Name;
            var request = new HttpRequestMessage(HttpMethod.Get, "Persons");
            request.Headers.Add("FilterType", PatientService.FilterType?.ToString());
            request.Headers.Add("UserLogin", userName);
            using var httpResponse = await Http.SendAsync(request);
            IEnumerable<PatientDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<PatientDto>>();
            if (result != null && result.Any() || force)
            {
                PatientService.AllPersons = new List<Patient>();
                using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
                {
                    List<Patient> patients = new List<Patient>();
                    db.Patients.Clear();
                    await db.SaveChanges();
                    foreach (PatientDto person in result)
                    {
                        Patient patient = new Patient
                        {
                            PersonID = person.PersonID,
                            FirstName = person.Firstname,
                            SurName = person.Lastname,
                            Patronymic = person.Patronymic,
                            Age = person.Age,
                            BirthDay = person.Birthday,
                            Bed = person.Bed,
                            Room = person.Room,
                            IsChanged = person.isChanged,
                            VersionID = person.VersionID,
                            StayDep = person.StayDep,
                            ResponsibleDep = person.ResponsibleDep,
                            InResuscitation = person.InResuscitation,
                            ObservationMode = person.ObservationMode,
                            PhysicalRestraint = person.PhysicalRestraint,
                            ObservationType = person.ObservationType,
                            ServiceCaseNumber = person.ServiceCaseNumber,
                            Doctor = person.Doctor,
                            Diagnos = person.Diagnos,
                            SDDepTreatmentCase = person.SDDepTreatmentCase,
                            SDInpatientServiceCase = person.SDInpatientServiceCase,
                            AgeDescription = person.AgeDescription,
                            Gender = person.SexEnum
                        };
                        db.Patients.Add(patient);
                        patients.Add(patient);
                    }
                    await db.SaveChanges();
                    return patients;
                }
            }
        }
        catch
        {

        }
        return null;
    }

    private async Task<List<CustomGridPerson>> ConvertJsonToObjPersonCustomization(string json)
    {
        List<CustomGridPerson> gridCustomization = new List<CustomGridPerson>();
        foreach (List<object> customization in string.IsNullOrWhiteSpace(json) ? DefaultGridPersonCustomization.GetDefaults() : JsonConvert.DeserializeObject<GridPersonCustomization>(json).customGridPerson)
        {
            CustomGridPerson customGridPerson = new CustomGridPerson();
            customGridPerson.NameColumnEn = customization.ElementAtOrDefault(0)?.ToString();
            customGridPerson.NameColumnRu = customization.ElementAtOrDefault(1)?.ToString();
            customGridPerson.OrderColumn = int.Parse(customization.ElementAtOrDefault(2)?.ToString() ?? int.MaxValue.ToString());
            customGridPerson.VisibilityColumn = bool.Parse(customization.ElementAtOrDefault(3)?.ToString() ?? false.ToString());
            customGridPerson.AvailableGroupings = bool.Parse(customization.ElementAtOrDefault(4)?.ToString() ?? false.ToString());
            customGridPerson.IsGrouping = bool.Parse(customization.ElementAtOrDefault(5)?.ToString() ?? false.ToString());
            customGridPerson.WhereToDisplay = bool.Parse(customization.ElementAtOrDefault(6)?.ToString() ?? false.ToString());
            customGridPerson.DateUpdate = customization.ElementAtOrDefault(7) as DateTime?;
            gridCustomization.Add(customGridPerson);
        }
        if (string.IsNullOrWhiteSpace(json))
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                PagesSettings pagesSetting = db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgridperson");
                if(pagesSetting == null)
                {
                    pagesSetting = new PagesSettings { FormID = "customGridPerson" };
                    db.PagesSettings.Add(pagesSetting);
                }
                if (string.IsNullOrWhiteSpace(pagesSetting.FormSettings))
                {
                    pagesSetting.FormSettings = JsonConvert.SerializeObject(new GridPersonCustomization { customGridPerson = DefaultGridPersonCustomization.GetDefaults() });
                }

                await db.SaveChanges();
            }
        }
        return gridCustomization;
    }

    private async Task<List<CustomGroupPerson>> ConvertToObjCustomGroup(string json)
    {
        List<CustomGroupPerson> customGroupPersons = new List<CustomGroupPerson>();
        foreach (List<object> customization in string.IsNullOrWhiteSpace(json) ? DefaultGroupPersonCustomization.GetDefaults() : JsonConvert.DeserializeObject<GroupPersonCustomization>(json).customGroupPerson)
        {
            CustomGroupPerson customGroupPerson = new CustomGroupPerson();
            customGroupPerson.NameButtonEn = customization.ElementAtOrDefault(0)?.ToString();
            customGroupPerson.NameButtonRu = customization.ElementAtOrDefault(1)?.ToString();
            customGroupPerson.Selected = bool.Parse(customization.ElementAtOrDefault(2)?.ToString() ?? false.ToString());
            customGroupPerson.DateUpdate = customization.ElementAtOrDefault(3) as DateTime?;
            customGroupPersons.Add(customGroupPerson);
        }

        if (string.IsNullOrWhiteSpace(json))
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                PagesSettings pagesSetting = db.PagesSettings.FirstOrDefault(x => x.FormID?.ToLower() == "customgroupperson");
                if (pagesSetting == null)
                {
                    pagesSetting = new PagesSettings { FormID = "customGroupPerson" };
                    db.PagesSettings.Add(pagesSetting);
                }
                if (string.IsNullOrWhiteSpace(pagesSetting.FormSettings))
                {
                    pagesSetting.FormSettings = JsonConvert.SerializeObject(new GroupPersonCustomization { customGroupPerson = DefaultGroupPersonCustomization.GetDefaults() });
                }

                await db.SaveChanges();
            }
        }
        return customGroupPersons;
    }
}
