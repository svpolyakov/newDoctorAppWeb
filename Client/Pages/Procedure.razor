@page "/procedure"
@inject IPatientsService PatientService
@inject HttpClient Http
@inject StateContainer StateContainer


<Progress isVisible="@showProgress"></Progress>
<MudPaper Class="innerPageWrapper">
    <div class="pageWrapper">
        <MudText Typo="Typo.h5">
            Процедуры
        </MudText>

        <div class="tabWrapper">
            <MudTabs>

            <MudTabPanel Text="ТЕКУЩИЕ"></MudTabPanel>            

            <MudTabPanel Text="ПО ВСЕЙ ГОСПИТАЛИЗАЦИИ">
                @if (iscProcedures != null)
                {
                    foreach (ProcedureResultDto procedure in iscProcedures)
                    {
                        <div>
                            <MudText Class="greenText" Typo="Typo.h5">@procedure.DepartmentTreatmentCase.Name c @procedure.DepartmentTreatmentCase.BeginDate.Value.ToString("dd.MM.yyyy")</MudText>
                        </div>

                        foreach (SingleProcedureResultDto singleProcList in procedure.SingleProcedureResultList)
                        {
                            string itemED = singleProcList.EndDate == null ? "" : "по " + singleProcList.EndDate.Value.ToString("dd.MM.yyyy HH:mm");
                            <MudGrid>
                                <MudItem xs="3">
                                    <div><MudText Class="grayText">@itemED</MudText></div>
                                </MudItem>
                                <MudItem xs="9">
                                    <div><MudText>@singleProcList.Name</MudText></div>
                                    <div><MudText Class="grayText">@singleProcList.Executor</MudText></div>
                                </MudItem>
                            </MudGrid>
                        }
                    }
                }
            </MudTabPanel>
            <MudTabPanel Text="АРХИВ">
                <MudGrid>
                    <MudItem xs="10">
                        <MudTextField OnKeyUp="@((KeyboardEventArgs evt) => { if (evt.Code == "Enter" || evt.Code == "NumpadEnter") { HandleSearch(); } })"
                                      OnClearButtonClick="HandleSearch"
                                      Clearable="true"
                                      FullWidth="true"
                                      @bind-Value="SearchQuery"
                                      Label="Название процедуры"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudIconButton @onclick="HandleSearch" Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Class="searchButton" />
                    </MudItem>
                </MudGrid>
                @if (allProcedures != null)
                {
                    foreach (ProcedureResultDto procedure in allProcedures)
                    {
                        <div>
                            <MudText Class="greenText" Typo="Typo.h5">@procedure.InpatientServiceCase.Name c @procedure.InpatientServiceCase.BeginDate.Value.ToString("dd.MM.yyyy")</MudText>
                        </div>

                        foreach (SingleProcedureResultDto singleProcList in procedure.SingleProcedureResultList)
                        {
                            string itemED = singleProcList.EndDate == null ? "" : "по " + singleProcList.EndDate.Value.ToString("dd.MM.yyyy HH:mm");
                            <MudGrid>
                                <MudItem xs="3">
                                    <div><MudText Class="grayText">@itemED</MudText></div>
                                </MudItem>
                                <MudItem xs="9">
                                    <div><MudText>@singleProcList.Name</MudText></div>
                                    <div><MudText Class="grayText">@singleProcList.Executor</MudText></div>
                                </MudItem>
                            </MudGrid>
                        }
                    }
                }
            </MudTabPanel>

            </MudTabs>
        </div>
    </div>
</MudPaper>
<style>
    .arrowDown {
        transform: rotate(180deg);
    }
    .expanderButton {
        padding: 0;
    }
    .grayText {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray
    }
    .greenText {
        color: @DoctorAppWeb.Client.Shared.Colors.Green
    }
    .tableHeader {
         background-color: @DoctorAppWeb.Client.Shared.Colors.LightBlue;
    }
    .innerTDPadding {
        padding-left: 1rem;
    }
    .searchButton {
        width: 100%;
        margin-top: 3px;
        margin-bottom: 2px;
    }
</style>

@code {
    public bool showProgress = true;

    public List<ProcedureResultDto> allProcedures = new List<ProcedureResultDto>();
    public List<ProcedureResultDto> dtcProcedures = new List<ProcedureResultDto>();
    public List<ProcedureResultDto> iscProcedures = new List<ProcedureResultDto>();

    public List<ProcedureResultDto> fullList = new List<ProcedureResultDto>();

    public string SearchQuery;

    protected override async Task OnInitializedAsync()
    {
        showProgress = true;
        StateContainer.ShowDrawer = true;
        StateContainer.CurrentPage = Pages.Procedure;

        List<ProcedureResultDto> archive = await GetProceduresAsync(SrvType.All);
        dtcProcedures = await GetProceduresAsync(SrvType.DTC);
        iscProcedures = await GetProceduresAsync(SrvType.ISC);

        if (archive != null)
        {
            allProcedures = archive;
            fullList = archive.GetRange(0, archive.Count);
        }
        showProgress = false;
    }

    private async Task<List<ProcedureResultDto>> GetProceduresAsync(SrvType srvType)
    {
        List<ProcedureResultDto> result = null;
        try
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "Procedures/Procedures");
            httpRequest.Headers.Add("personId", StateContainer.CurrentPatient.PersonID.ToString());
            httpRequest.Headers.Add("hcsId", PatientService.HealthcareServiceId.ToString());
            httpRequest.Headers.Add("srvType", srvType.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<List<ProcedureResultDto>>();
        }
        catch (Exception ex)
        {

        }

        return result;
    }

    private async Task HandleSearch() {
        if (String.IsNullOrEmpty(SearchQuery))
        {
            allProcedures = fullList;
            return;
        }

        List<ProcedureResultDto> filtered = new List<ProcedureResultDto>();
        foreach (ProcedureResultDto procedure in fullList)
        {
            ProcedureResultDto filteredGroup = new ProcedureResultDto();

            filteredGroup.InpatientServiceCase = procedure.InpatientServiceCase;
            filteredGroup.SingleProcedureResultList = new List<SingleProcedureResultDto>();

            IEnumerable<SingleProcedureResultDto> matched = procedure.SingleProcedureResultList
            .Where(singleProc => singleProc.Name.ToLower().Contains(SearchQuery.ToLower()));

            if (matched.Any())
            {
                filteredGroup.SingleProcedureResultList = matched.ToList();

                filtered.Add(filteredGroup);
            }
        }

        allProcedures = filtered;
    }
}
