@page "/authrequired"
@layout AuthLayout
@using DoctorAppWeb.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using IndexedDB.Blazor;
@attribute [AllowAnonymous]
@inject NavigationManager navigationManager
@inject IIndexedDbFactory DbFactory
<h2>Auth FAKE</h2>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
    <DataAnnotationsValidator />

    <label for="inputUsername" class="sr-only">User Name</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
    <ValidationMessage For="@(() => loginRequest.UserName)" />

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
    <ValidationMessage For="@(() => loginRequest.Password)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

    <label class="text-danger">@error</label>
</EditForm>

@code {
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }

    async Task OnSubmit()
    {
        CustomAuthorization customAuthorization = null;

        using (var db = await this.DbFactory.Create<MainDB>())
        {
            customAuthorization = db.CustomAuthorizations.FirstOrDefault(x => x.Login == loginRequest.UserName);
            if (customAuthorization != null)
            {
                if (customAuthorization.DateUpdate?.AddDays(1) < DateTime.Now)
                {
                    customAuthorization.ActualAuthorization = false;
                }
                else
                {
                    customAuthorization.ActualAuthorization = true;
                }
                await db.SaveChanges();
            }
        }

        if (customAuthorization == null || (customAuthorization.ActualAuthorization.HasValue && !customAuthorization.ActualAuthorization.Value))
        {
            navigationManager.NavigateTo("/authrequired");
        }
        else
        {
            navigationManager.NavigateTo("");
        }
        return;
    }
}
