@page "/customization"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Text
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService modal
@inject IPatientsService PatientService
@inject StateContainer StateContainer

<MudPaper>
    <div class="pageWrapper">
        <div class="pageHeader">
            <MudText Typo="Typo.h5">
                Кастомизация
            </MudText>

            <div class="flexSpacer" />

            <MudIconButton  @onclick="ReFreshTree" Class="pale-icon" Icon="@Icons.Material.Outlined.Refresh" aria-label="refresh"></MudIconButton>
        </div>

        <MudGrid Class="filtersWrapper">
            <MudItem xs="10">
                <MudTextField OnKeyUp="@((KeyboardEventArgs evt) => { if (evt.Code == "Enter" || evt.Code == "NumpadEnter") { FindUser(); } })"
                              OnClearButtonClick="FindUser"
                              Clearable="true"
                              FullWidth="true"
                              @bind-Value="SearchText"
                              Label="ФИО или логин"
                              Variant="Variant.Outlined">
                </MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudIconButton @onclick="FindUser" Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Class="searchButton" />
            </MudItem>
        </MudGrid>

        <MudGrid Class="filtersWrapper">
            <MudItem xs="4" Class="tableHeader unWrapCell">Логин</MudItem>
            <MudItem xs="3" Class="tableHeader unWrapCell">ФИО</MudItem>
            <MudItem xs="5" Class="tableHeader unWrapCell">Описание</MudItem>
        </MudGrid>

        <MudTreeView T="TreeUserItem" ServerData="LoadUserList" Items="TreeUsers"
                     CanActivate="true"
                     ExpandOnClick="true"
                     ActivatedValueChanged="HandleActivatedValueChanged"
                     @bind-SelectedValue="SelectedUser"
                     Class="treeWrapper">
            <ItemTemplate>
                <MudTreeViewItem Items="@Enumerable.ToHashSet(context.SubItems)" Value="@context"
                                 Activated="@context.IsActivated" @bind-Expanded="@context.IsExpanded">
                    <Content>
                        <MudGrid Class="hBorderRow">
                                    <MudItem xs="1">
                                        <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                                    </MudItem>
                                    <MudItem xs="1">
                                        <MudIcon Icon="@Icons.Filled.Person" Color="@(GetIconColor(context))" Style="@(GetIconStyle(context))" />
                                    </MudItem>
                                    <MudItem xs="2" Class="@(GetTextClass(context))">@context.Login</MudItem>
                                    <MudItem xs="3" Class="@(GetTextClass(context))">@context.FIO</MudItem>
                                    <MudItem xs="5" Class="@(GetTextClass(context))">@context.Description</MudItem>
                        </MudGrid>
                    </Content>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="saveButton" Disabled="CustomDisabled" OnClick="HandleSaveCustomization">Взять настройки с пользователя</MudButton>
    </div>
</MudPaper>

<style>
    .tableHeader {
        background-color: @DoctorAppWeb.Client.Shared.Colors.LightBlue;
    }

    .pageHeader {
        display: flex;
        align-items: baseline;
    }

    .filtersWrapper {
        margin-top: 2rem;
    }

    .searchButton {
        width: 100%;
        height: 2.3rem;
        margin-top: 6px;
    }

    .saveButton {
        width: auto;
        height: 2.3rem;
        margin-right: 2px;
        margin-top: 6px;
        float: right;
    }

    .treeItemTextDefault {
        color:black
    }

    .treeItemTextCustom {
        color:@Theme.Palette.Success
    }

    .pale-icon {
        color: @DoctorAppWeb.Client.Shared.Colors.BorderGray;
        width: 1.5rem;
        height: 1.5rem;
    }

    .flexSpacer {
        flex: 1;
    }

    .filtersWrapper {
        margin-top: 2rem;
    }

    .treeWrapper {
        padding-top: 9px;
        padding-bottom: 38px;
    }

    .hBorderRow {
        border-bottom: 1px solid #eeeeef;
    }
</style>

@code{

    public class TreeUserItem
    {
        public TreeUserItem ParentUserItem { get; set; }
        public string Login { get; set; }
        public string FIO { get; set; }
        public string Description { get; set; }
        public bool HasWebCustomization { get; set; }
        public HashSet<TreeUserItem> SubItems { get; set; } = new HashSet<TreeUserItem>();
        public int Level { get; set; } = 0;
        public bool HasChild => SubItems != null && SubItems.Count > 0;
        public bool IsExpanded { get; set; } = false;
        public bool IsActivated { get; set; } = false;
        public TreeUserItem(TreeUserItem parent, UserDto user)
        {
            ParentUserItem = parent;
            Login = user.Login;
            FIO = user.FIO;
            Description = user.Description;
            HasWebCustomization = user.HasWebCustomization;
            if (parent != null)
            {
                Level = parent.Level+1;
            }
            if (user.SubItems != null && user.SubItems.Count() > 0)
            {
                foreach (UserDto subUser in user.SubItems)
                {
                    SubItems.Add(new TreeUserItem(this, subUser));
                }
            }
        }
        public int GetMaxLevel()
        {
            int maxLevel = Level;
            if (HasChild)
            {
                foreach (TreeUserItem userItem in SubItems)
                {
                    var maxLevelChild = userItem.GetMaxLevel();
                    if (maxLevelChild > maxLevel) { maxLevel = maxLevelChild; }
                }
            }
            return maxLevel;
        }
    }

    private string SearchText;
    private TreeUserItem SelectedUser = new TreeUserItem(null, new UserDto());
    private HashSet<TreeUserItem> TreeUsers { get; set; } = new HashSet<TreeUserItem>();
    private bool CustomDisabled = true;
    private MudTheme Theme = new MudTheme();
    private int MaxTreeLevel = 0;


    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StateContainer.AppTitle = "Настройка кастомизации";
        StateContainer.ShowDrawer = false;
        StateContainer.CurrentPatient = null;

        await ReFillTree();
    }

    private async Task ReFillTree()
    {
        TreeUsers = new HashSet<TreeUserItem>();
        foreach (UserDto user in Enumerable.ToHashSet(await GetUsers()))
        {
            var userItem = new TreeUserItem(null, user);
            var maxLevel = userItem.GetMaxLevel();
            if (maxLevel > MaxTreeLevel) { MaxTreeLevel = maxLevel; }
            TreeUsers.Add(userItem);
        }
    }

    protected async Task ReFreshTree()
    {
        await ReFillTree();
        await InvokeAsync(StateHasChanged);
    }

    protected async Task<IEnumerable<UserDto>> GetUsers()
    {
        try
        {
            string userName = (await AuthenticationState).User.Identity.Name;
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "Customization/Users");
            httpRequest.Headers.Add("login", userName);
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            IEnumerable<UserDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<UserDto>>();
            return result;
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                throw ex.InnerException;
            }
            throw ex;
        }
    }

    public async Task<HashSet<TreeUserItem>> LoadUserList(TreeUserItem parentNode)
    {
        if (parentNode != null)
        {
            await Task.Delay(500);
            return parentNode.SubItems;
        }
        return new HashSet<TreeUserItem>();
    }

    private Color GetIconColor(TreeUserItem user)
    {
        return (user.HasWebCustomization ? MudBlazor.Color.Success : MudBlazor.Color.Default);
    }

    private string GetIconStyle(TreeUserItem user)
    {
        return string.Concat("visibility:", (user.SubItems == null || user.SubItems.Count() == 0) ? "visible": "hidden");
    }

    private string GetTextClass(TreeUserItem user)
    {
        return (user.HasWebCustomization ? "treeItemTextCustom" : "treeItemTextDefault");
    }

    private TreeUserItem SearchUser(HashSet<TreeUserItem> subUserItems)
    {
        var foundUser = (TreeUserItem)subUserItems.Where(x => x.FIO.Contains(SearchText) || x.Login.Contains(SearchText)).FirstOrDefault();
        if (foundUser == null)
        {
            foreach (TreeUserItem subUserItem in subUserItems)
            {
                if (subUserItem.SubItems != null && subUserItem.SubItems.Count() > 0)
                {
                    foundUser = SearchUser(subUserItem.SubItems);
                    if (foundUser != null) { break; }
                }
            }
        }
        return foundUser;
    }

    private void ActivateSelectedUser(TreeUserItem userItem)
    {
        if (userItem != null)
        {
            var parentUser = userItem.ParentUserItem;
            while (parentUser != null)
            {
                parentUser.IsExpanded = true;
                parentUser = parentUser.ParentUserItem;
            }
            userItem.IsActivated = true;
            HandleActivatedValueChanged(userItem);
            InvokeAsync(StateHasChanged);
        }
    }

    private void FindUser()
    {
        var foundUser = SearchUser(TreeUsers);
        if (foundUser != null)
        {
            ActivateSelectedUser(foundUser);
        }
    }

    private void HandleActivatedValueChanged(TreeUserItem userItem)
    {
        if (userItem != null)
        {
            if (SelectedUser != null)
            {
                SelectedUser.IsActivated = false;
            }
            SelectedUser = userItem;
            CustomDisabled = !SelectedUser.HasWebCustomization;
            SelectedUser.IsActivated = true;
        }
    }

    private async void HandleSaveCustomization(MouseEventArgs e)
    {
        string userName = (await AuthenticationState).User.Identity.Name;
        var httpRequest = new HttpRequestMessage(HttpMethod.Post, "Customization/Copy");
        httpRequest.Headers.Add("sourceLogin", SelectedUser.Login);
        httpRequest.Headers.Add("targetLogin", userName);
        var httpResponse = await Http.SendAsync(httpRequest);
        httpResponse.EnsureSuccessStatusCode();
        TreeUsers = new HashSet<TreeUserItem>();
        foreach (UserDto user in Enumerable.ToHashSet(await GetUsers()))
        {
            TreeUsers.Add(new TreeUserItem(null, user));
        }
        await InvokeAsync(StateHasChanged);
    }
}

