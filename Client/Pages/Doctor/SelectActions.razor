@page "/selectactions"
 
 
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject IModalService modal
@inject IPatientsService PatientService
<style>
    .select-actions-container {
        padding: 20px;
    }

    .select-actions-container .select-actions-top-container {
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .select-actions-container .select-actions-middle-container {
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
    }

    .select-actions-container .select-actions-middle-container .select-actions-middle-center-container {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
    }

    .select-actions-container .select-actions-middle-container .select-actions-middle-center-container > button {
        margin: 10px;
        height: 50px;
    }

    .select-actions-container .select-actions-middle-container .select-actions-middle-right-container {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
    }

    .select-actions-container .select-actions-middle-container .select-actions-middle-right-container > * {
        margin: 10px;
        height: 50px;
    }
</style>
<div class="select-actions-container">
    <h3 class="text-center">Рабочее место врача на обходе</h3>
    <div class="select-actions-container select-actions-top-container alert alert-secondary mt-4" role="alert">
        <span class="text-nowrap">Последнее обновление: @info.DateGetData</span>
        <span class="text-nowrap" style="justify-self: flex-end; margin-left: auto;">Последняя выгрузка: @info.DateSetData</span>
    </div>
    <div class="select-actions-container select-actions-middle-container">
        <div style="flex: 2;"></div>
        <div style="flex: 5;"
             class="select-actions-container select-actions-middle-container select-actions-middle-center-container">
            <button @onclick="GetData" class="btn btn-info">Забрать "@GetDataButtonLabel"</button>
            <button class="btn btn-info" @onclick="UploadData">Выгрузить</button>
            <button class="btn btn-info" @onclick="UploadData">Продолжить работу</button>
        </div>

        <div style="flex: 2;"
             class="select-actions-container select-actions-middle-container select-actions-middle-right-container">
            <button @onclick="@OnSelectionChangeClicked"
                    class="btn btn-info w-100">
                Изменить отбор
            </button>
            <div></div>
            <div></div>
        </div>
    </div>
</div>





<div align="right">
    <button @onclick="Continue" class="btn btn-primary">Продолжить работу</button>
</div>

@code {

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    public Info info { get; set; } = new Info();

    private string GetDataButtonLabel;
    private long? FilterType;

    public async Task OnSelectionChangeClicked()
    {
        try
        {
            var ModalRef = modal.Show<SelectedType>("Изменить отбор");
            var SelectionResult = (await ModalRef.Result);
            object ResultData = SelectionResult.Data;
            CustomGroupPerson SelectedCustomGroupPerson = (CustomGroupPerson)ResultData;
            GetDataButtonLabel = SelectedCustomGroupPerson.NameButtonRu;
            FilterType = SelectedCustomGroupPerson.Id;
        }
        catch(Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        CustomGroupPerson custromGroupPerson = await PatientService.GetCustomGroupPerson();
        GetDataButtonLabel = custromGroupPerson.NameButtonRu;
        FilterType = custromGroupPerson.Id;
        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            info = db.InfoData.FirstOrDefault();
        } 
    }

    public async Task GetData()
    {
        try
        {
            string userName = (await AuthenticationState).User.Identity.Name;
            var request = new HttpRequestMessage(HttpMethod.Get, "Persons");
            request.Headers.Add("FilterType", FilterType?.ToString());
            request.Headers.Add("UserLogin", userName);
            using var httpResponse = await Http.SendAsync(request);
            IEnumerable<PersonDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<PersonDto>>();
            if (result != null)
            {
                using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
                {
                    db.Patients.Clear();
                    foreach (PersonDto person in result)
                    {
                        db.Patients.Add(new Patient
                        {
                            PersonID = person.ID,
                            FirstName = person.Firstname,
                            SurName = person.Lastname,
                            Patronymic = person.Patronymic,
                            Age = person.Age,
                            BirthDay = person.Birthday,
                            Bed = person.Bed,
                            Room = person.Room,
                            IsChanged = person.isChanged,
                            VersionID = person.VersionID,
                            StayDep = person.StayDep,
                            ResponsibleDep = person.ResponsibleDep,
                            InResuscitation = person.InResuscitation,
                            ObservationMode = person.ObservationMode,
                            PhysicalRestraint = person.PhysicalRestraint,
                            ObservationType = person.ObservationType,
                            ServiceCaseNumber = person.ServiceCaseNumber,
                            Doctor = person.Doctor,
                            Diagnos = person.Diagnos,
                            SDDepTreatmentCase = person.SDDepTreatmentCase,
                            SDInpatientServiceCase = person.SDInpatientServiceCase
                        });
                    }
                    db.InfoData.Clear();
                    info.DateGetData = DateTime.Now;
                    db.InfoData.Add(info);
                    await db.SaveChanges();
                }
            }
        }
        catch
        {

        }
    }

    public Task UploadData()
    {
        return null;
    }

    public Task Continue()
    {
        return null;
    }
}
