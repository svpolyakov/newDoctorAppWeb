@page "/personlist"
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService modal
@inject IPatientsService PatientService

@if (PersonsOnPage == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <h3>@FullDocName</h3>
    <div class="persons-top-container alert alert-secondary">
        <span class="btn">Всего пациентов @PersonsCount</span>
        <span>@GetDataButtonLabel</span>
        <span style="justify-self: flex-end; margin-left: auto;">
            <button class="btn btn-info" type="button" @onclick="OnFilterButtonClicked">Изменить отбор</button>
        </span>
    </div>




    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">
                    <input type="search"
                           class="form-control ds-input"
                           list="search-persons-datalist"
                           id="search-input"
                           placeholder="Поиск..."
                           style="position: relative; vertical-align: top;"
                           @oninput="@OnInputSearchAsync"
                           @onchange="@OnSearchAsync">
                    <datalist id="search-persons-datalist">
                        @foreach (var person in PatientService.AllPersons)
                        {
                            <option value="@person.SurName @person.FirstName @person.Patronymic">@person.SurName @person.FirstName @person.Patronymic</option>
                        }

                    </datalist>
                </th>
                <th scope="col">
                    <span class="btn">Возраст</span>
                </th>
                <th scope="col">
                    <span class="btn">Отделение</span>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (PersonsOnPage.Count() == 0)
            {
                <tr>
                    <th scope="row" colspan="3">
                        <div class="alert alert-warning">Нет записей удовлетворяющих поисковому выражению: "@SearchQuery"</div>
                    </th>
                </tr>
            }
            else
            {
                @foreach (Patient person in PersonsOnPage)
                {
                    <tr>
                        <th scope="row">@person.SurName @person.FirstName @person.Patronymic</th>
                        <td>@person.Age</td>
                        <td>@person.StayDep</td>
                    </tr>
                }
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="3">
                    <div class="persons-bottom-container">
                        @if (PersonsOnPage.Count() > 0)
                        {
                            <span style="justify-self: flex-end; margin-left: auto;" class="btn">
                                Показано @((PageNumber-1)*PageSize+1) - @((PageNumber-1)*PageSize+ PersonsOnPage.Count()) из @PersonsCount
                            </span>
                            @if (PageNumber > 1)
                            {
                                <button class="btn" @onclick="@OnPrevPageClicked">&lt;</button>
                            }
                            @if (PageNumber < PagesCount)
                            {
                                <button class="btn" @onclick="@OnNextPageClicked">&gt;</button>
                            }
                        }
                    </div>
                </th>
            </tr>
        </tfoot>
    </table>


}

@code {

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    public string FullDocName { get; set; }
    //private long? FilterType = 1;
    public Info info { get; set; } = new Info();
    private string GetDataButtonLabel;
    /// <summary>
    /// Все пациенты
    /// </summary>
    //private Patient[] AllPersons;

    /// <summary>
    /// Пациенты, отображаемые на странице
    /// </summary>
    private Patient[] PersonsOnPage;

    /// <summary>
    /// Кол-во пациентов, удовлетворяющих поисковому выражению
    /// </summary>
    private int PersonsCount;

    /// <summary>
    /// Номер страницы
    /// </summary>
    private int PageNumber = 1;

    /// <summary>
    /// Кол-во записей на странице
    /// </summary>
    private int PageSize = 10;

    /// <summary>
    /// Кол-во страниц
    /// </summary>
    private int PagesCount;

    /// <summary>
    /// Значение в поисковой строке
    /// </summary>
    private string InputSearchValue = "";

    /// <summary>
    /// Поисковое выражение
    /// </summary>
    private string SearchQuery = "";

    /// <summary>
    /// Выполняется по событию ввода текста в поле поиска
    /// </summary>
    /// <returns></returns>
    protected void OnInputSearchAsync(ChangeEventArgs evt)
    {
        InputSearchValue = evt.Value.ToString();
    }

    /// <summary>
    /// Выполняется по событию изменения текста в поле поиска
    /// </summary>
    /// <returns></returns>
    protected void OnSearchAsync(ChangeEventArgs evt)
    {
        SearchQuery = evt.Value.ToString();
        PageNumber = 1;
        PersonsCount = PatientService.AllPersons.Where(p => (p.FirstName + " " + p.SurName + " " + p.Patronymic).ToLower().Contains(SearchQuery.ToLower())).Count();
        PagesCount = PersonsCount % PageSize > 0 ? (int)(1 + Math.Floor((decimal)(PersonsCount / PageSize))) : (int)(PersonsCount / PageSize);
        UpdatePagePersons();
    }



    /// <summary>
    /// Выполняется по событию нажатия кнопки "Изменить отбор"
    /// </summary>
    /// <returns></returns>
    protected async void OnFilterButtonClicked()
    {
        try
        {
            var ModalRef = modal.Show<SelectedType>("Изменить отбор");
            var SelectionResult = (await ModalRef.Result);
            PatientService.AllPersons = (await LoadDataToIndexedDb())?.ToList() ?? new List<Patient>();
            object ResultData = SelectionResult.Data;
            CustomGroupPerson SelectedCustomGroupPerson = (CustomGroupPerson)ResultData;
            GetDataButtonLabel = SelectedCustomGroupPerson.NameButtonRu;
            PatientService.FilterType = SelectedCustomGroupPerson.Id;
            if (PatientService.AllPersons != null)
            {
                PersonsCount = PatientService.AllPersons.Count();
                PagesCount = PersonsCount % PageSize > 0 ? (int)(1 + Math.Floor((decimal)(PersonsCount / PageSize))) : (int)(PersonsCount / PageSize);
                UpdatePagePersons();
            }
        }
        catch (Exception ex)
        {

        }
        StateHasChanged();
    }

    /// <summary>
    /// Выполняется по событию нажатия кнопки перехода на предыдущую страницу
    /// </summary>
    /// <returns></returns>
    protected void OnPrevPageClicked()
    {
        this.PageNumber--;
        this.UpdatePagePersons();
    }

    /// <summary>
    /// Выполняется по событию нажатия кнопки перехода на следующую страницу
    /// </summary>
    /// <returns></returns>
    protected void OnNextPageClicked()
    {
        this.PageNumber++;
        this.UpdatePagePersons();
    }


    /// <summary>
    /// Обновление отображаемых записей
    /// </summary>
    protected void UpdatePagePersons()
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            PersonsOnPage = PatientService.AllPersons.Skip((PageNumber - 1) * PageSize).Take(PageSize).ToArray();
        }
        else
        {
            PersonsOnPage = PatientService.AllPersons.Where(p => (p.SurName + " " + p.FirstName + " " + p.Patronymic).ToLower().Contains(SearchQuery.ToLower())).Skip((PageNumber - 1) * PageSize).Take(PageSize).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (PatientService.FilterType == 0 || !PatientService.FilterType.HasValue)
        {
            PatientService.FilterType = 1;
        }
        string userName = (await AuthenticationState).User.Identity.Name;
        PatientService.UserName = userName;
        CustomGroupPerson custromGroupPerson = await PatientService.GetCustomGroupPerson();
        GetDataButtonLabel = custromGroupPerson.NameButtonRu;
        PatientService.FilterType = custromGroupPerson.Id;

        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            if (!db.Patients.Any())
            {
                PatientService.AllPersons = (await LoadDataToIndexedDb()).ToList();
            }
            else
            {
                PatientService.AllPersons = db.Patients.ToList();
            }
        }
        if (PatientService.AllPersons != null)
        {
            PersonsCount = PatientService.AllPersons.Count();
            PagesCount = PersonsCount % PageSize > 0 ? (int)(1 + Math.Floor((decimal)(PersonsCount / PageSize))) : (int)(PersonsCount / PageSize);
            UpdatePagePersons();
        }
    }

    private async Task<List<Patient>> LoadDataToIndexedDb()
    {
        try
        {
            string userName = (await AuthenticationState).User.Identity.Name;
            var request = new HttpRequestMessage(HttpMethod.Get, "Persons");
            request.Headers.Add("FilterType", PatientService.FilterType?.ToString());
            request.Headers.Add("UserLogin", userName);
            using var httpResponse = await Http.SendAsync(request);
            IEnumerable<PersonDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<PersonDto>>();
            if (result != null && result.Any())
            {
                PatientService.AllPersons = new List<Patient>();
                using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
                {
                    List<Patient> patients = new List<Patient>();
                    db.Patients.Clear();
                    await db.SaveChanges();
                    foreach (PersonDto person in result)
                    {
                        Patient patient = new Patient
                        {
                            PersonID = person.ID,
                            FirstName = person.Firstname,
                            SurName = person.Lastname,
                            Patronymic = person.Patronymic,
                            Age = person.Age,
                            BirthDay = person.Birthday,
                            Bed = person.Bed,
                            Room = person.Room,
                            IsChanged = person.isChanged,
                            VersionID = person.VersionID,
                            StayDep = person.StayDep,
                            ResponsibleDep = person.ResponsibleDep,
                            InResuscitation = person.InResuscitation,
                            ObservationMode = person.ObservationMode,
                            PhysicalRestraint = person.PhysicalRestraint,
                            ObservationType = person.ObservationType,
                            ServiceCaseNumber = person.ServiceCaseNumber,
                            Doctor = person.Doctor,
                            Diagnos = person.Diagnos,
                            SDDepTreatmentCase = person.SDDepTreatmentCase,
                            SDInpatientServiceCase = person.SDInpatientServiceCase
                        };
                        db.Patients.Add(patient);
                        patients.Add(patient);
                    }
                    await db.SaveChanges();
                    return patients;
                }
            }
        }
        catch
        {

        }
        return null;
    }
}
