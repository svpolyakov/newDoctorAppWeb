@page "/whatisnew"
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPatientsService PatientService
@inject NavigationManager navigationManager
@inject StateContainer StateContainer

<Progress isVisible="@showProgress"></Progress>
<MudPaper Class="innerPageWrapper">
    <div class="pageWrapper">
        <MudText Typo="Typo.h5">
            Что нового
        </MudText>

    </div>
</MudPaper>

@code {
    public bool showProgress = true;
    List<NewFiagnosInfoDto> newDiagnosis = new List<NewFiagnosInfoDto>();
    List<NewServiceInfoDto> newHcs = new List<NewServiceInfoDto>();
    List<NewParameterInfoDto> newLabTest = new List<NewParameterInfoDto>();
    List<ConsultanceDto> newConsultance = new List<ConsultanceDto>();
    Dictionary<int, List<NewParameterInfoDto>> labtest = new Dictionary<int, List<NewParameterInfoDto>>();
    List<InvestigationDto> investigationDtos = new List<InvestigationDto>();


    private async Task GetWhatNewsFull()
    {
        newHcs = await GetNewHealthcareServices();
        foreach (NewServiceInfoDto serviceInfoDto in newHcs)
        {
            switch (serviceInfoDto.InfoType)
            {
                case NewServiceInfoType.Diagnos: newDiagnosis.Add(await GetNewPatientDiagnos(serviceInfoDto.InfoId)); break;
                case NewServiceInfoType.Consultance: newConsultance.Add(await GetNewConsultance(serviceInfoDto.InfoId)); break;
                case NewServiceInfoType.LabTest: labtest.Add(labtest.Keys.Any() ? labtest.Count + 1 : 0, await GetNewLabTest(serviceInfoDto.InfoId)); break;
                case NewServiceInfoType.Investigation: investigationDtos.Add(await GetNewInvestigation(serviceInfoDto.InfoId)); break;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        StateContainer.ShowDrawer = true;
        showProgress = true;
        //await GetWhatNewsFull();
        showProgress = false;
    }

    private async Task<List<NewServiceInfoDto>> GetNewHealthcareServices() //ОК
    {
        List<NewServiceInfoDto> result = null;
        try
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "News/NewHealthcareServices");
            httpRequest.Headers.Add("healthcareServiceId", PatientService.HealthcareServiceId.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<List<NewServiceInfoDto>>();
        }
        catch (Exception ex)
        {

        }

        return result;
    }

    private async Task<NewFiagnosInfoDto> GetNewPatientDiagnos(Guid id)
    {
        NewFiagnosInfoDto result = null;
        try
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "News/NewPatientDiagnos");
            httpRequest.Headers.Add("diagnosId", id.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<NewFiagnosInfoDto>();
        }
        catch (Exception ex)
        {

        }

        return result;
    }

    private async Task<List<NewParameterInfoDto>> GetNewLabTest(Guid id)
    {
        List<NewParameterInfoDto> result = null;
        try
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "News/NewLabTest");
            httpRequest.Headers.Add("labTestId", id.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<List<NewParameterInfoDto>>();
        }
        catch (Exception ex)
        {

        }

        return result;
    }

    public async Task<InvestigationDto> GetNewInvestigation(Guid id)
    {
        InvestigationDto result = null;
        try
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "News/NewInvestigation");
            httpRequest.Headers.Add("investigationId", id.ToString()); //ИЗВЛЕЧЬ Investg_ИД
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<InvestigationDto>();
        }
        catch (Exception ex)
        {

        }

        return result;
    }

    public async Task<ConsultanceDto> GetNewConsultance(Guid id)
    {
        ConsultanceDto result = null;
        try
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "News/NewConsultance");
            httpRequest.Headers.Add("consultanceId", id.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<ConsultanceDto>();
        }
        catch (Exception ex)
        {

        }

        return result;
    }
}
