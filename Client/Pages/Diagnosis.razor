@page "/diagnosis"
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPatientsService PatientService
@inject NavigationManager navigationManager
@inject StateContainer StateContainer
@inject StateContainer StateContainer

<Progress isVisible="@showProgress"></Progress>
<MudPaper Class="innerPageWrapper">
    <div class="pageWrapper">
        <MudText Typo="Typo.h5">
            Диагнозы
        </MudText>

        <div class="tabWrapper">
            <MudTabs>
                <MudTabPanel OnClick="@(() => HandleArchiveToggle())" Text="ТЕКУЩИЕ">
                    @if (diagnosis != null && diagnosis.Any())
                    {
                        foreach (DepartmentPatientDiagnosInfoDto diag in diagnosis)
                        {
                            <div class="infoBlock">
                                <MudText Class="infoTitle" Color="Color.Secondary">@diag.Department</MudText>
                                <div class="infoWrapper">
                                    @foreach (PatientDiagnosInfoDto info in diag.PatientDiagnosInfoList)
                                    {
                                        <MudGrid>
                                            <MudItem xs="2"><MudText Class="grayText" Typo="Typo.subtitle1">@info.WhenStartedDate.ToString().Split(' ')[0]</MudText></MudItem>
                                            <MudItem xs="10">
                                                <div><MudText Class="blueText">@info.MKBDiagnosisCode @info.DiagnosText</MudText></div>
                                                <div><MudText Class="grayText">@info.DiagnosisImportance @info.IllnessType @info.CureStagesDiagnos @info.DiagnosisAccuracy</MudText></div>
                                            </MudItem>
                                        </MudGrid>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                        {
                            <MudText Typo="Typo.h5">@DoctorAppWeb.Client.Shared.EmptyStateMessages.Diagnosis</MudText>
                        }
                </MudTabPanel>
                <MudTabPanel OnClick="@(() => HandleArchiveToggle())" Text="АРХИВ">
                    <MudGrid>
                        <MudItem xs="10">
                            <MudTextField OnKeyUp="@((KeyboardEventArgs evt) => { if (evt.Code == "Enter" || evt.Code == "NumpadEnter") { HandleSearch(); } })"
                                          OnClearButtonClick="HandleSearch"
                                          Clearable="true"
                                          FullWidth="true"
                                          @bind-Value="SearchQuery"
                                          Label="Код или текст диагноза"
                                          Margin="Margin.Dense"
                                          Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton @onclick="HandleSearch" Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Class="searchButton" />
                        </MudItem>
                    </MudGrid>
                    @if (diagnosis != null && diagnosis.Any())
                    {
                        foreach (DepartmentPatientDiagnosInfoDto diag in diagnosis)
                        {
                            @foreach (PatientDiagnosInfoDto info in diag.PatientDiagnosInfoList)
                            {
                                <MudGrid>
                                    <MudItem xs="2"><MudText Class="grayText" Typo="Typo.subtitle1">@info.WhenStartedDate.ToString().Split(' ')[0]</MudText></MudItem>
                                    <MudItem xs="10">
                                        <div><MudText Class="blueText">@info.MKBDiagnosisCode @info.DiagnosText</MudText></div>
                                    </MudItem>
                                </MudGrid>
                            }
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.h5">@DoctorAppWeb.Client.Shared.EmptyStateMessages.Diagnosis</MudText>
                    }
                </MudTabPanel>

            </MudTabs>
        </div>


    </div>
</MudPaper>


<style>
    .infoBlock {
        margin-bottom: 1.5rem;
    }
    .infoTitle {
        margin-bottom: 0.25rem;
    }
    .infoWrapper {
        margin-top: 0.75rem;
    }
    .grayText {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray
    }
    .blueText {
        color: @DoctorAppWeb.Client.Shared.Colors.Blue
    }
    .searchButton {
        width: 100%;
        margin-top: 3px;
        margin-bottom: 2px;
    }
</style>

@code {
    public bool showProgress = true;
    public bool isArchive = false;
    public string SearchQuery;
    public IEnumerable<DepartmentPatientDiagnosInfoDto> diagnosis { get; set; }
    protected override async Task OnInitializedAsync()
    {
        showProgress = true;
        StateContainer.ShowDrawer = true;
        diagnosis = await GetDiagnoses();
        showProgress = false;
    }

    protected async Task<IEnumerable<DepartmentPatientDiagnosInfoDto>> GetDiagnoses(bool Archive = false)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "Diagnosis");
        request.Headers.Add("PersonId", PatientService.CurrentPatient.ToString());
        request.Headers.Add("Archive", Archive.ToString());
        request.Headers.Add("HealthcareServiceId", PatientService.HealthcareServiceId.ToString());
        HttpResponseMessage httpResponse = await Http.SendAsync(request);
        IEnumerable<DepartmentPatientDiagnosInfoDto> result = await httpResponse.Content.ReadFromJsonAsync<IEnumerable<DepartmentPatientDiagnosInfoDto>>();
        return result;
    }

    private async Task HandleArchiveToggle()
    {
        isArchive = !isArchive;

        showProgress = true;
        // isArchive -- no data there
        diagnosis = await GetDiagnoses(isArchive);
        showProgress = false;
    }

    private async Task HandleSearch()
    {
        diagnosis = diagnosis
            .Where(d =>
                (d.PatientDiagnosInfoList
                .Where(info =>
                    (info.MKBDiagnosisCode + " " + info.DiagnosText).ToLower().Contains(SearchQuery.ToLower()))
                .Count() > 0));
    }
}
