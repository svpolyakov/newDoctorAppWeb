@page "/selectactions"
@using DoctorAppWeb.Shared
@using IndexedDB.Blazor;
@using DoctorAppWeb.Shared.Models;
@inject HttpClient Http
@inject IIndexedDbFactory DbFactory
@inject IModalService modal
<style>
    .select-actions-container
    {
        padding: 20px;
    }
    .select-actions-container .select-actions-top-container {
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }
    .select-actions-container .select-actions-middle-container {
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
    }
    .select-actions-container .select-actions-middle-container .select-actions-middle-center-container 
    {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
    }
    .select-actions-container .select-actions-middle-container .select-actions-middle-center-container > button
    {
        margin: 10px;  
        height: 50px;
    }
    .select-actions-container .select-actions-middle-container .select-actions-middle-right-container 
    {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
    }
    .select-actions-container .select-actions-middle-container .select-actions-middle-right-container > *
    {
        margin: 10px;  
        height: 50px;
    }
</style>
<div class="select-actions-container">
    <h3 class="text-center">Рабочее место врача на обходе</h3>   
    <div class="select-actions-container select-actions-top-container alert alert-secondary mt-4" role="alert">                                            
        <span class="text-nowrap">Последнее обновление: @info.DateGetData</span>
        <span class="text-nowrap" style="justify-self: flex-end; margin-left: auto;">Последняя выгрузка: @info.DateSetData</span>
    </div>
    <div class="select-actions-container select-actions-middle-container">
        <div style="flex: 2;"></div>
        <div style="flex: 5;"
             class="select-actions-container select-actions-middle-container select-actions-middle-center-container">
            <button @onclick="GetData" class="btn btn-info">Забрать "Мои пациенты"</button>
            <button class="btn btn-info" @onclick="UploadData">Выгрузить</button>
            <button class="btn btn-info" @onclick="UploadData">Продолжить работу</button>
        </div>
        <div style="flex: 2;"
             class="select-actions-container select-actions-middle-container select-actions-middle-right-container">
            <button @onclick="@(()=>modal.Show<SelectedType>("Изменить отбор"))"
                    class="btn btn-info w-100">
                Изменить отбор
            </button>
            <div></div>
            <div></div>
        </div>
    </div>
</div>
              
<div align="right">
    <button @onclick="Continue" class="btn btn-primary">Продолжить работу</button>
</div>

@code {
    Info info { get; set; } = new Info();

    protected override async Task OnInitializedAsync()
    {
        using (var db = await this.DbFactory.Create<MainDB>())
        {
            db.InfoData.Add(new Info { DateGetData = DateTime.Now, DateSetData = DateTime.Now });
            info = db.InfoData.FirstOrDefault();
            db.CustomPerson.Add(new CustomPerson()
            {
                CustomGridPerson = new List<CustomGridPerson>() { new CustomGridPerson { NameColumnEn = "dsfdsdfs1", NameColumnRu = "fdffdsfsfds1" } },
                CustomGroupPersons = new List<CustomGroupPersons> { new CustomGroupPersons() { NameButtonEn = "dsfdsfdsfds1", NameButtonRu = "dffdsfdccxzcz1" } },
                DateUpdate = DateTime.Now
            });

            
            await db.SaveChanges();
        }
    }

    public async Task GetData()
    {

    }

    public Task UploadData()
    {
        return null;
    }

    public Task Continue()
    {
        return null;
    }
}
