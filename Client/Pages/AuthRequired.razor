@page "/authrequired"

@layout AuthLayout
@attribute [AllowAnonymous]

@inject NavigationManager navigationManager
@inject IIndexedDbFactory DbFactory

@using Microsoft.AspNetCore.Authorization


<h3>Автономный режим</h3>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
    <DataAnnotationsValidator />

    <label for="inputUsername" class="sr-only">User Name</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
    <ValidationMessage For="@(() => loginRequest.UserName)" />

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
    <ValidationMessage For="@(() => loginRequest.Password)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

    <label class="text-danger">@error</label>
</EditForm>


@code {

    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }


    async Task OnSubmit()
    {
        CustomAuthorization customAuthorization = null;

        using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
        {
            customAuthorization = db.CustomAuthorizations.FirstOrDefault(x => x.Login == loginRequest.UserName);
            if (customAuthorization == null || (customAuthorization != null && customAuthorization.DateUpdate?.AddDays(1) < DateTime.Now))
            {
                navigationManager.NavigateTo("/authrequired");
            }
            else
            {
                customAuthorization.DateActual = DateTime.Now;
                await db.SaveChanges();
                navigationManager.NavigateTo("");
            }
        }
        return;

    }
}
