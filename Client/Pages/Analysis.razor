@page "/analysis"

@using System.Text.RegularExpressions
@inject IPatientsService PatientService
@inject HttpClient Http
@inject StateContainer StateContainer
@inject IDialogService Dialog

<Progress isVisible="@showProgress"></Progress>
<MudPaper Class="innerPageWrapper">
    <div class="pageWrapper">
        <MudText Typo="Typo.h5">
            Анализы
        </MudText>
        <div class="tabWrapper">
            <MudTabs>
                <MudTabPanel Text="ТЕКУЩИЕ">
                    @if (dtcAnalysis != null && dtcAnalysis.Any())
                    {
                        foreach (LabTestDto analysisGroup in dtcAnalysis)
                        {
                            <div class="groupHeader">
                                <MudText Class="greenText" Typo="Typo.h5">@analysisGroup.LabTestName</MudText>
                            </div>

                            <MudTable Items="@analysisGroup.ParameterList" Dense="true">
                                <HeaderContent>
                                    <MudTh Class="tableHeader stickyLeftCell"><span class="tableHeaderText">Название</span></MudTh>
                                    @foreach (DateTime date in analysisGroup.DatesList)
                                    {
                                        <MudTh Class="tableHeader"><span class="tableHeaderText">@date.ToString("dd.MM.yyyy HH:mm")</span></MudTh>
                                    }
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd Class="stickyLeftCell">
                                        @if (IsChartAvailable(context))
                                                {
                                            <span @onclick="@(e =>  ShowChart(context, context.ParameterName))"
                                                  class="link tableHeaderText">@context.ParameterName</span>
                                                    }
                                                    else
                                                    {
                                                <span class="tableHeaderText">@context.ParameterName</span>
                                                    }
                                    </MudTd>
                                    @foreach (DateTime date in analysisGroup.DatesList)
                                            {
                                                string[] value = GetValueByDate(context, date);
                                                string valueClassName = IsOutOfNorm(context, date) ? "redText nowrap" : "nowrap";

                                        <MudTd>
                                            <MudText Class="@valueClassName">@value[0] @((MarkupString)value[1])</MudText>
                                            <MudText Class="grayText" Typo="Typo.caption">@value[2]</MudText>
                                        </MudTd>
                                            }
                                </RowTemplate>
                            </MudTable>
                        }
                    }
                    else
                    {
                        <MudText Class="emptyState" Typo="Typo.h5">@DoctorAppWeb.Client.Shared.EmptyStateMessages.Analysis</MudText>
                    }
                </MudTabPanel>
                <MudTabPanel Text="ПО ВСЕЙ ГОСПИТАЛИЗАЦИИ">
                    @if (iscAnalysis != null && iscAnalysis.Any())
                    {
                        <MudExpansionPanels>
                            @foreach (LabTestDto analysisGroup in iscAnalysis)
                            {
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText Class="greenText" Typo="Typo.h5">@analysisGroup.LabTestName</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudTable Items="@analysisGroup.ParameterList" Dense="true">
                                            <HeaderContent>
                                                <MudTh Class="tableHeader stickyLeftCell"><span class="tableHeaderText">Название</span></MudTh>
                                                @foreach (DateTime date in analysisGroup.DatesList)
                                                {
                                                    <MudTh Class="tableHeader"><span class="tableHeaderText">@date.ToString("dd.MM.yyyy HH:mm")</span></MudTh>
                                                }
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class="stickyLeftCell tableHeader">
                                                    @if (IsChartAvailable(context))
                                                            {
                                                        <span @onclick="@(e =>  ShowChart(context, context.ParameterName))"
                                                              class="link tableHeaderText">@context.ParameterName</span>
                                                                }
                                                                else
                                                                {
                                                            <span class="tableHeaderText">@context.ParameterName</span>
                                                                }
                                                </MudTd>
                                                @foreach (DateTime date in analysisGroup.DatesList)
                                                        {
                                                            string[] value = GetValueByDate(context, date);
                                                            string valueClassName = IsOutOfNorm(context, date) ? "redText nowrap" : "nowrap";

                                                    <MudTd>
                                                        <MudText Class="@valueClassName">@value[0] @((MarkupString)value[1])</MudText>
                                                        <MudText Class="grayText" Typo="Typo.caption">@value[2]</MudText>
                                                    </MudTd>
                                                        }

                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>
                    }
                    else
                    {
                        <MudText Class="emptyState" Typo="Typo.h5">@DoctorAppWeb.Client.Shared.EmptyStateMessages.Analysis</MudText>
                    }
                </MudTabPanel>
                <MudTabPanel Text="АРХИВ">
                    <MudGrid>
                        <MudItem xs="10">
                            <MudTextField OnKeyUp="@((KeyboardEventArgs evt) => { if (evt.Code == "Enter" || evt.Code == "NumpadEnter") { HandleSearch(); } })"
                                          OnClearButtonClick="HandleSearch"
                                          Clearable="true"
                                          FullWidth="true"
                                          @bind-Value="SearchQuery"
                                          Label="Название анализа"
                                          Margin="Margin.Dense"
                                          Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton @onclick="HandleSearch" Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Class="searchButton" />
                        </MudItem>
                    </MudGrid>
                    @if (allAnalysis != null && allAnalysis.Any())
                    {
                        <MudExpansionPanels>
                            @foreach (LabTestDto analysisGroup in allAnalysis)
                            {
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText Class="greenText" Typo="Typo.h5">@analysisGroup.LabTestName</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudTable Items="@analysisGroup.ParameterList" Dense="true">
                                            <HeaderContent>
                                                <MudTh Class="tableHeader stickyLeftCell"><span class="tableHeaderText">Название</span></MudTh>
                                                @foreach (DateTime date in analysisGroup.DatesList)
                                                {
                                                    <MudTh Class="tableHeader"><span class="tableHeaderText">@date.ToString("dd.MM.yyyy HH:mm")</span></MudTh>
                                                }
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class="stickyLeftCell tableHeader">
                                                    @if (IsChartAvailable(context))
                                                            {
                                                        <span @onclick="@(e =>  ShowChart(context, context.ParameterName))"
                                                              class="link tableHeaderText">@context.ParameterName</span>
                                                                }
                                                                else
                                                                {
                                                            <span class="tableHeaderText">@context.ParameterName</span>
                                                                }
                                                </MudTd>
                                                @foreach (DateTime date in analysisGroup.DatesList)
                                                        {
                                                            string[] value = GetValueByDate(context, date);
                                                            string valueClassName = IsOutOfNorm(context, date) ? "redText nowrap" : "nowrap";

                                                    <MudTd>
                                                        <MudText Class="@valueClassName">@value[0] @((MarkupString)value[1])</MudText>
                                                        <MudText Class="grayText" Typo="Typo.caption">@value[2]</MudText>
                                                    </MudTd>
                                                        }
                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>
                    }
                    else
                    {
                        <MudText Class="emptyState" Typo="Typo.h5">@DoctorAppWeb.Client.Shared.EmptyStateMessages.Analysis</MudText>
                    }
                </MudTabPanel>
            </MudTabs>
        </div>
    </div>
</MudPaper>

<style>
    .stickyLeftCell {
        position: sticky;
        left: -1px;
        background-color: #fff;
    }
    .stickyRightCell {
        position: sticky;
        right: -1px;
        background-color: #fff;
    }
    .stickyLeftCell:after, .stickyRightCell:after {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        border-bottom: 1px solid var(--mud-palette-table-lines);
    }
    .tableHeader {
        background-color: @DoctorAppWeb.Client.Shared.Colors.LightBlue;
    }
    .tableHeaderText {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray;
        font-weight: 600;
        line-height: 1rem;
    }
    .groupHeader {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .grayText {
        color: @DoctorAppWeb.Client.Shared.Colors.Gray
    }
    .greenText {
        color: @DoctorAppWeb.Client.Shared.Colors.Green
    }
    .redText {
        color: @DoctorAppWeb.Client.Shared.Colors.Red;
    }
    .link {
        color: @DoctorAppWeb.Client.Shared.Colors.Blue;
        cursor: pointer;
    }
    .searchButton {
        width: 100%;
        margin-top: 3px;
        margin-bottom: 2px;
    }
    .nowrap {
        white-space: nowrap;
    }
</style>

@code {
    public bool showProgress = true;
    public string SearchQuery;

    private IDialogReference currentDlg;

    List<LabTestDto> allAnalysis;
    List<LabTestDto> iscAnalysis;
    List<LabTestDto> dtcAnalysis;

    List<LabTestDto> fullList;

    protected override async Task OnInitializedAsync()
    {
        StateContainer.ShowDrawer = true;
        StateContainer.CurrentPage = Pages.Analysis;
        showProgress = true;
        List<LabTestDto> archive = await GetAnalysisAsync(SrvType.All);
        dtcAnalysis = await GetAnalysisAsync(SrvType.DTC);
        iscAnalysis = await GetAnalysisAsync(SrvType.ISC);

        if (dtcAnalysis != null)
        {

            FillDatesArray(dtcAnalysis);
        }
        if (iscAnalysis != null)
        {
            FillDatesArray(iscAnalysis);
        }

        if (archive != null && archive.Any())
        {
            fullList = archive.GetRange(0, archive.Count);
            allAnalysis = archive;
        }

        if (allAnalysis != null)
        {
            FillDatesArray(allAnalysis);
        }

        showProgress = false;
    }

    private void FillDatesArray(List<LabTestDto> list)
    {
        foreach (LabTestDto analysisGroup in list)
        {
            analysisGroup.DatesList = new List<DateTime>();
            if (analysisGroup.ParameterList != null)
            {
                foreach (ParameterDto parameter in analysisGroup.ParameterList)
                {
                    if (parameter.ParameterValueList != null)
                    {
                        foreach (ParameterValueDto value in parameter.ParameterValueList)
                        {
                            if (value.EndDate != null)
                            {
                                DateTime timeValue = new DateTime(
                                    value.EndDate.Value.Year,
                                    value.EndDate.Value.Month,
                                    value.EndDate.Value.Day,
                                    value.EndDate.Value.Hour,
                                    value.EndDate.Value.Minute,
                                    0);
                                if (!analysisGroup.DatesList.Contains(timeValue))
                                {
                                    analysisGroup.DatesList.Add(timeValue);
                                }
                            }
                        }
                    }
                }
            }

            analysisGroup.DatesList = analysisGroup.DatesList.Distinct().ToList();
            analysisGroup.DatesList.Sort();
        }
    }

    private async Task<List<LabTestDto>> GetAnalysisAsync(SrvType srvType)
    {
        List<LabTestDto> result = null;
        try
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "Analysis/Analysis");
            httpRequest.Headers.Add("personId", StateContainer.CurrentPatient.PersonID.ToString());
            httpRequest.Headers.Add("hcsId", PatientService.HealthcareServiceId.ToString());
            httpRequest.Headers.Add("srvType", srvType.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<List<LabTestDto>>();
        }
        catch (Exception ex)
        {

        }

        return result;
    }

    private string[] GetValueByDate(ParameterDto context, DateTime date)
    {

        string[] result = new string[3];
        IEnumerable<ParameterValueDto> match = context.ParameterValueList.Where(value => value.EndDate.Value.ToString("dd.MM.yyyy HH:mm") == date.ToString("dd.MM.yyyy HH:mm"));
        if (!match.Any())
        {
            return result;
        }

        ParameterValueDto param = match.FirstOrDefault();

        result[0] = !String.IsNullOrEmpty(param?.TextValue) ? param?.TextValue : param?.Value?.ToString("0.####");
        if (!String.IsNullOrEmpty(param?.ValueMeasureUnit))
        {
            string pattern = @"\d{2}\D(\d+)(\/.+)";

            if (Regex.IsMatch(param.ValueMeasureUnit, pattern))
            {
                result[1] = Regex.Replace(param.ValueMeasureUnit, pattern, "10<sup>$1</sup>$2");
            }
            else
            {
                result[1] = param.ValueMeasureUnit;
            }
        }
        if (param?.ValueMinimum != null && param?.ValueMaximum != null)
        {
            result[2] += param.ValueMinimum.Value.ToString("0.####") + "-" + param.ValueMaximum.Value.ToString("0.####");
        }
        return result;
    }

    private bool IsOutOfNorm(ParameterDto context, DateTime date)
    {
        IEnumerable<ParameterValueDto> match = context.ParameterValueList.Where(value => value.EndDate.Value.ToString("dd.MM.yyyy HH:mm") == date.ToString("dd.MM.yyyy HH:mm"));
        if (!match.Any())
        {
            return false;
        }

        ParameterValueDto param = match.FirstOrDefault();

        return param?.OutOfNorm ?? false;
    }

    private bool IsChartAvailable(ParameterDto context)
    {
        if (context.ParameterValueList.Count() < 2)
        {
            return false;
        }

        if (context.ParameterValueList[0].Value == null || context.ParameterValueList[0].ValueMaximum == null || context.ParameterValueList[0].ValueMinimum == null)
        {
            return false;
        }

        return true;
    }

    private async Task HandleSearch()
    {
        if (String.IsNullOrEmpty(SearchQuery))
        {
            allAnalysis = fullList;
            return;
        }

        allAnalysis = fullList?.Where(group => group.LabTestName.ToLower().Contains(SearchQuery.ToLower())).ToList();
    }

    private void ShowChart(ParameterDto context, string ParamName)
    {
        List<double?> values = new List<double?>();
        List<double?> minThValues = new List<double?>();
        List<double?> maxThValues = new List<double?>();
        List<string> labels = new List<string>();

        foreach (ParameterValueDto value in context.ParameterValueList)
        {
            values.Add((double)value.Value);
            minThValues.Add((double)value.ValueMinimum);
            maxThValues.Add((double)value.ValueMaximum);

            labels.Add(value.EndDate.Value.ToString("dd.MM.yyyy HH:mm"));
        }

        var parameters = new DialogParameters
        {
            ["Title"] = ParamName,
            ["Data"] = values.ToArray(),
            ["MinThreshold"] = minThValues.ToArray(),
            ["MaxThreshold"] = maxThValues.ToArray(),
            ["Labels"] = labels.ToArray()
        };
        DialogOptions options = new DialogOptions() { CloseButton = true };
        Dialog.Show<LineChartDialog>(ParamName, parameters, options);
    }
}
