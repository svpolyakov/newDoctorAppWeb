@page "/meds"
@inject IPatientsService PatientService
@inject HttpClient Http
<Progress isVisible="@showProgress"></Progress>
<MudPaper Class="innerPageWrapper">
    <div class="pageWrapper">
        <MudText Typo="Typo.h5">
            Медикаменты
        </MudText>
        <div class="tabWrapper">
            <MudTabs>
                <MudTabPanel Text="ТЕКУЩИЕ"></MudTabPanel>
                <MudTabPanel Text="ПО ВСЕЙ ГОСПИТАЛИЗАЦИИ"></MudTabPanel>
                <MudTabPanel Text="АРХИВ">
                    <MudGrid>
                        <MudItem xs="10">
                            <MudTextField OnKeyUp="@((KeyboardEventArgs evt) => { if (evt.Code == "Enter" || evt.Code == "NumpadEnter") { HandleSearch(); } })"
                                          OnClearButtonClick="HandleSearch"
                                          Clearable="true"
                                          FullWidth="true"
                                          @bind-Value="SearchQuery"
                                          Label="Название медикамента"
                                          Margin="Margin.Dense"
                                          Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton @onclick="HandleSearch" Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Class="searchButton" />
                        </MudItem>
                    </MudGrid>
                    @if (allMeds != null)
                    {
                        foreach (PatientMedicamentDto medGroup in allMeds.AllMedicamentList)
                        {
                            <div>
                                <MudText Typo="Typo.h5">@medGroup.ParentServiceName c @medGroup.ServiceSD.Value.ToString("dd.MM.yyyy")</MudText>
                            </div>
                            if (medGroup.ServiceMedicamentList != null)
                                {
                                    foreach(ServiceMedicamentDto med in medGroup.ServiceMedicamentList)
                                    {

                                    }
                                }
                        }
                    }
                </MudTabPanel>
            </MudTabs>
        </div>
    </div>
</MudPaper>


@code {
    public bool showProgress = true;
    PatientMedicamentResultDto dtcMeds;
    PatientMedicamentResultDto iscMeds;
    PatientMedicamentResultDto allMeds;

    public string SearchQuery;

    protected override async Task OnInitializedAsync()
    {
        dtcMeds = await GetMedicamentsAsync(SrvType.DTC);
        iscMeds = await GetMedicamentsAsync(SrvType.ISC);
        allMeds = await GetMedicamentsAsync(SrvType.All);
    }

    private async Task<PatientMedicamentResultDto> GetMedicamentsAsync(SrvType srvType)
    {
        PatientMedicamentResultDto result = null;
        try
        {
            showProgress = true;
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, "Medicaments/Medicaments");
            httpRequest.Headers.Add("patientId", PatientService.CurrentPatient.ToString());
            httpRequest.Headers.Add("hcsId", PatientService.HealthcareServiceId.ToString());
            httpRequest.Headers.Add("srvType", srvType.ToString());
            HttpResponseMessage httpResponse = await Http.SendAsync(httpRequest);
            result = await httpResponse.Content.ReadFromJsonAsync<PatientMedicamentResultDto>();
            showProgress = false;
        }
        catch (Exception ex)
        {

        }

        return result;
    }

    private async Task HandleSearch() { }
}
