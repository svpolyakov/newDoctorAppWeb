@page "/login"

@using DoctorAppWeb.Client.Services

@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject CustomStateProvider authStateProvider
@inject IIndexedDbFactory DbFactory

<br />
<br />
<br />
<div class="main-logon">
    <h1>
        Рабочее место врача на обходе
    </h1>
    <br />
    <div class="authForm">
        <br />
        <br />

        <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
            <DataAnnotationsValidator />

            <label for="inputUsername" class="sr-only">User Name</label>
            <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
            <ValidationMessage For="@(() => loginRequest.UserName)" />
            <br />
            <label for="inputPassword" class="sr-only">Password</label>
            <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
            <ValidationMessage For="@(() => loginRequest.Password)" />
            <br />

            <div class="flexContainer">
                <button class="btn btn-lg btn-primary" type="submit">Войти</button> <NavLink href="counter">Забыли пароль?</NavLink>
            </div>
            <label class="text-danger">@error</label>

            <br />
            <NavLink href="register">
                <h6 class="font-weight-normal text-center">Create account</h6>
            </NavLink>
        </EditForm>

    </div>
</div>

@code{
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }


    async Task OnSubmit()
    {
        error = null;
        try
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                db.Webpages.Clear();
                db.CustomAuthorizations.Clear();
                await db.SaveChanges();
            }

            await authStateProvider.Login(loginRequest);

            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                DateTime dt = DateTime.Now;
                db.Webpages.Add(new Webpages() { FormID = "authorization", FormName = "РАБОЧЕЕ МЕСТО ВРАЧА НА ОБХОДЕ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "patient", FormName = "ПАЦИЕНТЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "whatIsNew", FormName = "ЧТО НОВОГО", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "indicant", FormName = "ПОКАЗАТЕЛИ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "labTest", FormName = "АНАЛИЗЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "pharmaTherapy", FormName = "МЕДИКАМЕНТЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "investigation", FormName = "ОБСЛЕДОВАНИЯ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "consultations", FormName = "КОНСУЛЬТАЦИИ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "procedures", FormName = "ПРОЦЕДУРЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "anamnesis", FormName = "АНАМНЕЗ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "diary", FormName = "ДНЕВНИК", DateUpdate = dt });
                await db.SaveChanges();
            }

            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}