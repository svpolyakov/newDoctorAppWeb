@page "/login"

@using DoctorAppWeb.Client.Services
@using DoctorAppWeb.Shared.DataModel.MedOrganization

@inject HttpClient Http
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject CustomStateProvider authStateProvider
@inject IIndexedDbFactory DbFactory

<br />
<br />
<br />
<div class="main-logon">
    <h1>
        Рабочее место врача на обходе
    </h1>
    <br />
    <div class="authForm">
        <br />
        <br />

        <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
            <DataAnnotationsValidator />

            <label for="inputUsername" class="sr-only">User Name</label>
            <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
            <ValidationMessage For="@(() => loginRequest.UserName)" />
            <br />
            <label for="inputPassword" class="sr-only">Password</label>
            <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
            <ValidationMessage For="@(() => loginRequest.Password)" />
            <br />

            <div class="flexContainer">
                <button class="btn btn-lg btn-primary" type="submit">Войти</button> <NavLink href="counter">Забыли пароль?</NavLink>
            </div>
            <label class="text-danger">@error</label>

            <br />
            <NavLink href="register">
                <h6 class="font-weight-normal text-center">Create account</h6>
            </NavLink>
        </EditForm>

    </div>
</div>

@code{
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }


    async Task OnSubmit()
    {
        error = null;
        try
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                db.PagesSettings.Clear();
                db.CustomAuthorizations.Clear();
                db.Departments.Clear();
                db.Doctors.Clear();
                db.CustomSettings.Clear();
                await db.SaveChanges();
            }

            await authStateProvider.Login(loginRequest);

            Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>> departmentsToDoctors = await Http.GetFromJsonAsync<Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>>>("Departments");
            var request = new HttpRequestMessage(HttpMethod.Get, "Customization");
            request.Headers.Add("UserLogin", loginRequest.UserName);
            using var httpResponse = await Http.SendAsync(request);
            CustomizationInfoDto result = await httpResponse.Content.ReadFromJsonAsync<CustomizationInfoDto>();
            
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                if (result != null && result.PagesSettings as Dictionary<string, string> != null)
                    foreach (KeyValuePair<string, string> webPageInfo in result.PagesSettings as Dictionary<string, string>)
                    {
                        if (string.IsNullOrWhiteSpace(webPageInfo.Key) || string.IsNullOrWhiteSpace(webPageInfo.Value))
                            continue;
                        db.PagesSettings.Add(new PagesSettings { FormID = webPageInfo.Key, FormSettings = webPageInfo.Value });
                    }

                foreach (Department dep in departmentsToDoctors.Item1)
                    db.Departments.Add(dep);

                foreach (DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor doc in departmentsToDoctors.Item2)
                    db.Doctors.Add(doc);

                await db.SaveChanges();
            }

            //    CustomSettings customSettings = new CustomSettings()
            //    {
            //        DateUpdate = result.CustomSettings.DateUpdate,
            //        MaxPeriodData = result.CustomSettings.MaxPeriodData,
            //        PeriodActive = result.CustomSettings.PeriodActive,
            //        OnlineMode = result.CustomSettings.OnlineMode
            //    };
            //    db.CustomSettings.Add(customSettings);

            //    await db.SaveChanges();
            //}

            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}