@page "/login"

@using DoctorAppWeb.Client.Services
@using DoctorAppWeb.Shared.DataModel.MedOrganization

@inject HttpClient Http
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject CustomStateProvider authStateProvider
@inject IIndexedDbFactory DbFactory
@inject IDialogService Dialog
<MudDialogProvider />

<Progress isVisible="@showProgress"></Progress>
<MudCard Class="loginBlock">
    <MudCardContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <div class="cardTitle">
                <MudText Typo="Typo.h4" Color="Color.Primary">
                    Рабочее место врача на обходе
                </MudText>
            </div>
            <div id="form">
                <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
                    <DataAnnotationsValidator />
                    <div>
                        <MudTextField Required="true" FullWidth="true" Label="Логин" id="inputUsername" @bind-Value="loginRequest.UserName" RequiredError="Имя пользователя не заполнено" />
                    </div>
                    <div>
                        <MudTextField Required="true" FullWidth="true" Label="Пароль" InputType="InputType.Password" id="inputPassword" @bind-Value="loginRequest.Password" RequiredError="Пароль не заполнен" />
                    </div>
                    <div class="buttonWrapper">
                        <MudButton Disabled="@(!success)" Variant="Variant.Filled" Color="Color.Primary" Class="fullWidth" OnClick="@(()=>OnSubmit())">Войти</MudButton>
                    </div>
                    <div class="forgotPwdWrapper">
                        <MudButton Color="Color.Secondary" OnClick="@(()=>OpenDialog())">Не помню пароль</MudButton>
                    </div>
                    <!--<NavLink href="register">
                        <h6 class="font-weight-normal text-center">Create account</h6>
                    </NavLink>-->
                </EditForm>

            </div>
        </MudForm>
    </MudCardContent>

</MudCard>

<style>
    .loginBlock {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }

    .fullWidth {
        width: 100%
    }

    .cardTitle {
        text-align: center;
        padding-top: 60px;
        margin-bottom: 60px;
    }

    .buttonWrapper {
        margin-top: 60px
    }

    .forgotPwdWrapper {
        display: flex;
        flex-direction: row-reverse;
        margin-top: 10px
    }
</style>

@code{
    public bool showProgress = false;
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }
    MudForm form;
    bool success;
    string[] errors = { };
    bool isResetDlgVisible = false;

    private void OpenDialog()
    {
        DialogOptions options = new DialogOptions() { CloseButton = true };
        Dialog.Show<LostPassword>("Сброс пароля", options);
    }


    async Task OnSubmit()
    {
        error = null;
        showProgress = true;
        try
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                db.PagesSettings.Clear();
                db.CustomAuthorizations.Clear();
                db.Departments.Clear();
                db.Doctors.Clear();
                db.CustomSettings.Clear();
                await db.SaveChanges();
            }

            await authStateProvider.Login(loginRequest);

            Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>> departmentsToDoctors = await Http.GetFromJsonAsync<Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>>>("Departments");
            var request = new HttpRequestMessage(HttpMethod.Get, "Customization");
            request.Headers.Add("UserLogin", loginRequest.UserName);
            using var httpResponse = await Http.SendAsync(request);
            CustomizationInfoDto result = await httpResponse.Content.ReadFromJsonAsync<CustomizationInfoDto>();

            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                if (result != null && result.PagesSettings as Dictionary<string, string> != null)
                    foreach (KeyValuePair<string, string> webPageInfo in result.PagesSettings as Dictionary<string, string>)
                    {
                        if (string.IsNullOrWhiteSpace(webPageInfo.Key) || string.IsNullOrWhiteSpace(webPageInfo.Value))
                            continue;
                        db.PagesSettings.Add(new PagesSettings { FormID = webPageInfo.Key, FormSettings = webPageInfo.Value });
                    }

                foreach (Department dep in departmentsToDoctors.Item1)
                    db.Departments.Add(dep);

                foreach (DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor doc in departmentsToDoctors.Item2)
                    db.Doctors.Add(doc);

                await db.SaveChanges();
            }

            //    CustomSettings customSettings = new CustomSettings()
            //    {
            //        DateUpdate = result.CustomSettings.DateUpdate,
            //        MaxPeriodData = result.CustomSettings.MaxPeriodData,
            //        PeriodActive = result.CustomSettings.PeriodActive,
            //        OnlineMode = result.CustomSettings.OnlineMode
            //    };
            //    db.CustomSettings.Add(customSettings);

            //    await db.SaveChanges();
            //}

            navigationManager.NavigateTo("/persons");
            showProgress = false;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
