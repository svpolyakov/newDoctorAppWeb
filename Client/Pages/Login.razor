@page "/login"

@using DoctorAppWeb.Client.Services
@using DoctorAppWeb.Shared.DataModel.MedOrganization

@inject HttpClient Http
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject CustomStateProvider authStateProvider
@inject IIndexedDbFactory DbFactory

<br />
<br />
<br />
<div class="main-logon">
    <h1>
        Рабочее место врача на обходе
    </h1>
    <br />
    <div class="authForm">
        <br />
        <br />

        <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
            <DataAnnotationsValidator />

            <label for="inputUsername" class="sr-only">User Name</label>
            <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
            <ValidationMessage For="@(() => loginRequest.UserName)" />
            <br />
            <label for="inputPassword" class="sr-only">Password</label>
            <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
            <ValidationMessage For="@(() => loginRequest.Password)" />
            <br />

            <div class="flexContainer">
                <button class="btn btn-lg btn-primary" type="submit">Войти</button> <NavLink href="counter">Забыли пароль?</NavLink>
            </div>
            <label class="text-danger">@error</label>

            <br />
            <NavLink href="register">
                <h6 class="font-weight-normal text-center">Create account</h6>
            </NavLink>
        </EditForm>

    </div>
</div>

@code{
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }


    async Task OnSubmit()
    {
        error = null;
        try
        {
            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                db.Webpages.Clear();
                db.CustomAuthorizations.Clear();
                db.Departments.Clear();
                db.Doctors.Clear();
                db.CustomSettings.Clear();
                db.CustomGroupPersons.Clear();
                db.CustomGridPersons.Clear();
                db.CustomPersons.Clear();
                db.ReplacementDoctors.Clear();
                await db.SaveChanges();
            }

            await authStateProvider.Login(loginRequest);


            Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>> departmentsToDoctors = await Http.GetFromJsonAsync<Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>>>("Departments");
            var request = new HttpRequestMessage(HttpMethod.Get, "Customization");
            request.Headers.Add("UserLogin", loginRequest.UserName);
            using var httpResponse = await Http.SendAsync(request);
            CustomizationInfoDto result = await httpResponse.Content.ReadFromJsonAsync<CustomizationInfoDto>();



            using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
            {
                DateTime dt = DateTime.Now;
                db.Webpages.Add(new Webpages() { FormID = "authorization", FormName = "РАБОЧЕЕ МЕСТО ВРАЧА НА ОБХОДЕ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "patient", FormName = "ПАЦИЕНТЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "whatIsNew", FormName = "ЧТО НОВОГО", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "indicant", FormName = "ПОКАЗАТЕЛИ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "labTest", FormName = "АНАЛИЗЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "pharmaTherapy", FormName = "МЕДИКАМЕНТЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "investigation", FormName = "ОБСЛЕДОВАНИЯ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "consultations", FormName = "КОНСУЛЬТАЦИИ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "procedures", FormName = "ПРОЦЕДУРЫ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "anamnesis", FormName = "АНАМНЕЗ", DateUpdate = dt });
                db.Webpages.Add(new Webpages() { FormID = "diary", FormName = "ДНЕВНИК", DateUpdate = dt });

                foreach(Department dep in departmentsToDoctors.Item1)
                {
                    db.Departments.Add(dep);
                }

                foreach(DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor doc in departmentsToDoctors.Item2)
                {
                    db.Doctors.Add(doc);
                }

                CustomSettings customSettings = new CustomSettings()
                {
                    DateUpdate = result.CustomSettings.DateUpdate,
                    MaxPeriodData = result.CustomSettings.MaxPeriodData,
                    PeriodActive = result.CustomSettings.PeriodActive,
                    OnlineMode = result.CustomSettings.OnlineMode
                };
                db.CustomSettings.Add(customSettings);

                List<CustomGroupPerson> customGroupPersons = new List<CustomGroupPerson>();
                foreach(CustomGroupPersonsDto customGroupPersonsDto in result.WebPages.CustomPerson.CustomGroupPersons)
                {
                    customGroupPersons.Add(new CustomGroupPerson { NameButtonEn = customGroupPersonsDto.nameButtonEn, NameButtonRu = customGroupPersonsDto.nameButtonRu, OrderButton = customGroupPersonsDto.OrderButton, Selected = customGroupPersonsDto.Selected });
                }

                List<CustomGridPerson> customGridPersons = new List<CustomGridPerson>();
                foreach(CustomGridPersonDto customGridPersonDto in result.WebPages.CustomPerson.CustomGridPerson)
                {
                    customGridPersons.Add(new CustomGridPerson { AvailableGroupings = customGridPersonDto.AvailableGroupings, IsGrouping = customGridPersonDto.isGrouping, NameColumnEn = customGridPersonDto.NameColumnEn, NameColumnRu = customGridPersonDto.NameColumnRu, OrderColumn = customGridPersonDto.OrderColumn, VisibilityColumn = customGridPersonDto.VisibilityColumn });
                }

                CustomPerson customPerson = new CustomPerson { CustomGridPerson = customGridPersons, CustomGroupPersons = customGroupPersons, DateUpdate = result.WebPages.CustomPerson.DateUpdate };
                db.CustomPersons.Add(customPerson);

                foreach(CustomReplacementDoctorDto customReplacementDoctorDto in result.ReplacementDoctor)
                {
                    db.ReplacementDoctors.Add(new ReplacementDoctor { DateUpdate = customReplacementDoctorDto.DateUpdate, PersonId = customReplacementDoctorDto.PersonId, PositionTypeID = customReplacementDoctorDto.PositionTypeID, Selected = customReplacementDoctorDto.Selected });
                }

                foreach(CustomFromDepartmentDto customFromDepartmentDto in result.FromDepartments)
                {
                    db.FromDepartments.Add(new FromDepartments { BusinessElementID = customFromDepartmentDto.BusinessElementID, DateUpdate = customFromDepartmentDto.DateUpdate, Selected = customFromDepartmentDto.Selected });
                }



                await db.SaveChanges();
            }


            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}