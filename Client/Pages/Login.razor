@page "/login"

@using DoctorAppWeb.Client.Services
@using DoctorAppWeb.Shared.DataModel.MedOrganization

@inject HttpClient Http
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject CustomStateProvider authStateProvider
@inject IIndexedDbFactory DbFactory
@inject IDialogService Dialog
@inject ISnackbar Snackbar
<MudDialogProvider />
<MudSnackbarProvider  />

    <Progress isVisible="@showProgress"></Progress>
    <MudCard Class="loginBlock">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <div class="cardTitle" style="display: flex">
                    <div class="loginLogoWrapper"><img src="logoGray.svg"></div>
                    <MudText Typo="Typo.h4" Color="Color.Primary">Авиценна.планшет</MudText>
                </div>

                <div id="form">
                    <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
                        <DataAnnotationsValidator />
                        <div style="display: flex">
                            @if (pageState == 0)
                            {
                                <MudTextField TextChanged="@(() => ResetError("login"))"
                                              OnKeyUp="@((KeyboardEventArgs evt) => { if (evt.Code == "Enter" || evt.Code == "NumpadEnter") { Next(); } })"
                                              Error="@loginError"
                                              ErrorText="Неверное имя пользователя или пароль"
                                              Immediate="true"
                                              Required="true"
                                              FullWidth="true"
                                              Label="Логин"
                                              id="inputUsername"
                                              @bind-Value="loginRequest.UserName"
                                              RequiredError="Имя пользователя не заполнено" />
                                <MudIconButton Disabled="@String.IsNullOrEmpty(loginRequest.UserName)" Icon="@Icons.Filled.Forward" OnClick="@Next" Color="Color.Primary"/>
                            }
                            else if (pageState == 1)
                            {
                                <MudTextField TextChanged="@(() => ResetError("password"))"
                                              OnKeyUp="@((KeyboardEventArgs evt) => { if (evt.Code == "Enter" || evt.Code == "NumpadEnter") { Next(); } })"
                                              Error="@passwordError"
                                              ErrorText="Неверное имя пользователя или пароль"
                                              Immediate="true"
                                              Required="true"
                                              FullWidth="true"
                                              Label="Пароль"
                                              InputType="InputType.Password"
                                              id="inputPassword"
                                              @bind-Value="loginRequest.Password"
                                              RequiredError="Пароль не заполнен" />
                                <MudIconButton Disabled="@String.IsNullOrEmpty(loginRequest.Password)" Icon="@Icons.Filled.Forward" OnClick="@OnSubmit" Color="Color.Primary"/>
                            }

                        </div>
                        <div class="forgotPwdWrapper">
                            <MudIconButton Disabled="@(pageState == 0)" Icon="@Icons.Filled.ArrowBackIos" OnClick="@Prev" Color="Color.Primary" />
                            <div class="flexSpacer" />
                            <MudButton Color="Color.Secondary" OnClick="@(()=>OpenDialog())">Не помню пароль</MudButton>
                        </div>
                    </EditForm>

                </div>
            </MudForm>
        </MudCardContent>

    </MudCard>

    <style>
        .loginBlock {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        .fullWidth {
            width: 100%
        }

        .cardTitle {
            text-align: center;
            padding-top: 2rem;
            margin-bottom: 2rem;
        }

        .buttonWrapper {
            margin-top: 1rem
        }

        .forgotPwdWrapper {
            display: flex;
            flex-direction: row;
            margin-top: 1rem;
        }

        .loginLogoWrapper {
            padding-right: 1rem;
        }
        .flexSpacer {
            flex: 1;
        }
    </style>

    @code{
        public int pageState = 0; // 0 - show login; 1 - show password; 2 - show login button
        public bool showProgress = false;
        public bool loginError = false;
        public bool passwordError = false;
        LoginRequest loginRequest { get; set; } = new LoginRequest();
        string error { get; set; }
        MudForm form;
        bool success;
        string[] errors = { };
        bool isResetDlgVisible = false;

        private void Next() {
            pageState = 1;
        }

        private void Prev()
        {
            pageState = 0;
        }

        private void OpenDialog()
        {
            DialogOptions options = new DialogOptions() { CloseButton = true };
            Dialog.Show<LostPassword>("Сброс пароля", options);
        }

        private void ResetError(string type)
        {
            if (type == "password")
            {
                passwordError = false;
            }
            if (type == "login")
            {
                loginError = false;
            }
        }

        async Task OnSubmit()
        {
            error = null;
            showProgress = true;
            try
            {
                //using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
                //{
                //    //db.PagesSettings.Clear();
                //    //db.CustomAuthorizations.Clear();
                //    db.Departments.Clear();
                //    db.Doctors.Clear();
                //    //db.CustomSettings.Clear();
                //    await db.SaveChanges();
                //}

                

                Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>> departmentsToDoctors = await Http.GetFromJsonAsync<Tuple<IEnumerable<Department>, IEnumerable<DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor>>>("Departments");
                //var request = new HttpRequestMessage(HttpMethod.Get, "Customization");
                //request.Headers.Add("UserLogin", loginRequest.UserName);
                //using var httpResponse = await Http.SendAsync(request);
                //CustomizationInfoDto result = await httpResponse.Content.ReadFromJsonAsync<CustomizationInfoDto>();

                using (var db = await this.DbFactory.Create<IndexedApplicationDb>())
                {
                    //if (result != null && result.PagesSettings as Dictionary<string, string> != null)
                    //    foreach (KeyValuePair<string, string> webPageInfo in result.PagesSettings as Dictionary<string, string>)
                    //    {
                    //        if (string.IsNullOrWhiteSpace(webPageInfo.Key) || string.IsNullOrWhiteSpace(webPageInfo.Value))
                    //            continue;
                    //        db.PagesSettings.Add(new PagesSettings { FormID = webPageInfo.Key, FormSettings = webPageInfo.Value });
                    //    }

                    if(!db.Departments.Any())
                        foreach (Department dep in departmentsToDoctors.Item1)
                            db.Departments.Add(dep);
                    if (!db.Doctors.Any())
                        foreach (DoctorAppWeb.Shared.DataModel.MedOrganization.Doctor doc in departmentsToDoctors.Item2)
                            db.Doctors.Add(doc);

                    await db.SaveChanges();

                    await authStateProvider.Login(loginRequest);
                }

                //    CustomSettings customSettings = new CustomSettings()
                //    {
                //        DateUpdate = result.CustomSettings.DateUpdate,
                //        MaxPeriodData = result.CustomSettings.MaxPeriodData,
                //        PeriodActive = result.CustomSettings.PeriodActive,
                //        OnlineMode = result.CustomSettings.OnlineMode
                //    };
                //    db.CustomSettings.Add(customSettings);

                //    await db.SaveChanges();
                //}

                navigationManager.NavigateTo("/persons");
                showProgress = false;
            }
            catch (Exception ex)
            {
                showProgress = false;
                Snackbar.Add("Ошибка входа: " + ex.Message, Severity.Error, config => { config.ShowCloseIcon = false; config.HideIcon = true; });
                loginError = true;
                passwordError = true;
                error = ex.Message;
            }
        }
    }
